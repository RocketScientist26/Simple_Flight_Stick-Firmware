
FlightStick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a628  0800a628  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a628  0800a628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a630  0800a630  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  2000017c  0800a7b4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  0800a7b4  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015809  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da1  00000000  00000000  000359ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf2b  00000000  00000000  0003bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fed  00000000  00000000  00057a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009238d  00000000  00000000  00070a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf0  00000000  00000000  00102e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a598 	.word	0x0800a598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800a598 	.word	0x0800a598

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_uldivmod>:
 8000654:	b953      	cbnz	r3, 800066c <__aeabi_uldivmod+0x18>
 8000656:	b94a      	cbnz	r2, 800066c <__aeabi_uldivmod+0x18>
 8000658:	2900      	cmp	r1, #0
 800065a:	bf08      	it	eq
 800065c:	2800      	cmpeq	r0, #0
 800065e:	bf1c      	itt	ne
 8000660:	f04f 31ff 	movne.w	r1, #4294967295
 8000664:	f04f 30ff 	movne.w	r0, #4294967295
 8000668:	f000 b976 	b.w	8000958 <__aeabi_idiv0>
 800066c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000674:	f000 f806 	bl	8000684 <__udivmoddi4>
 8000678:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000680:	b004      	add	sp, #16
 8000682:	4770      	bx	lr

08000684 <__udivmoddi4>:
 8000684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000688:	9e08      	ldr	r6, [sp, #32]
 800068a:	460d      	mov	r5, r1
 800068c:	4604      	mov	r4, r0
 800068e:	4688      	mov	r8, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14d      	bne.n	8000730 <__udivmoddi4+0xac>
 8000694:	428a      	cmp	r2, r1
 8000696:	4694      	mov	ip, r2
 8000698:	d968      	bls.n	800076c <__udivmoddi4+0xe8>
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	b152      	cbz	r2, 80006b6 <__udivmoddi4+0x32>
 80006a0:	fa01 f302 	lsl.w	r3, r1, r2
 80006a4:	f1c2 0120 	rsb	r1, r2, #32
 80006a8:	fa20 f101 	lsr.w	r1, r0, r1
 80006ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b0:	ea41 0803 	orr.w	r8, r1, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80006ba:	fbb8 f7f1 	udiv	r7, r8, r1
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	fb01 8817 	mls	r8, r1, r7, r8
 80006c6:	fb07 f00e 	mul.w	r0, r7, lr
 80006ca:	0c23      	lsrs	r3, r4, #16
 80006cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006d0:	4298      	cmp	r0, r3
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x66>
 80006d4:	eb1c 0303 	adds.w	r3, ip, r3
 80006d8:	f107 35ff 	add.w	r5, r7, #4294967295
 80006dc:	f080 811e 	bcs.w	800091c <__udivmoddi4+0x298>
 80006e0:	4298      	cmp	r0, r3
 80006e2:	f240 811b 	bls.w	800091c <__udivmoddi4+0x298>
 80006e6:	3f02      	subs	r7, #2
 80006e8:	4463      	add	r3, ip
 80006ea:	1a1b      	subs	r3, r3, r0
 80006ec:	fbb3 f0f1 	udiv	r0, r3, r1
 80006f0:	fb01 3310 	mls	r3, r1, r0, r3
 80006f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f8:	b2a4      	uxth	r4, r4
 80006fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006fe:	45a6      	cmp	lr, r4
 8000700:	d90a      	bls.n	8000718 <__udivmoddi4+0x94>
 8000702:	eb1c 0404 	adds.w	r4, ip, r4
 8000706:	f100 33ff 	add.w	r3, r0, #4294967295
 800070a:	f080 8109 	bcs.w	8000920 <__udivmoddi4+0x29c>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f240 8106 	bls.w	8000920 <__udivmoddi4+0x29c>
 8000714:	4464      	add	r4, ip
 8000716:	3802      	subs	r0, #2
 8000718:	2100      	movs	r1, #0
 800071a:	eba4 040e 	sub.w	r4, r4, lr
 800071e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000722:	b11e      	cbz	r6, 800072c <__udivmoddi4+0xa8>
 8000724:	2300      	movs	r3, #0
 8000726:	40d4      	lsrs	r4, r2
 8000728:	e9c6 4300 	strd	r4, r3, [r6]
 800072c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000730:	428b      	cmp	r3, r1
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0xc2>
 8000734:	2e00      	cmp	r6, #0
 8000736:	f000 80ee 	beq.w	8000916 <__udivmoddi4+0x292>
 800073a:	2100      	movs	r1, #0
 800073c:	e9c6 0500 	strd	r0, r5, [r6]
 8000740:	4608      	mov	r0, r1
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f183 	clz	r1, r3
 800074a:	2900      	cmp	r1, #0
 800074c:	d14a      	bne.n	80007e4 <__udivmoddi4+0x160>
 800074e:	42ab      	cmp	r3, r5
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd4>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fc 	bhi.w	8000950 <__udivmoddi4+0x2cc>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb65 0303 	sbc.w	r3, r5, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e2      	beq.n	800072c <__udivmoddi4+0xa8>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7df      	b.n	800072c <__udivmoddi4+0xa8>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xec>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 8091 	bne.w	800089c <__udivmoddi4+0x218>
 800077a:	eba1 000c 	sub.w	r0, r1, ip
 800077e:	2101      	movs	r1, #1
 8000780:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000784:	fa1f fe8c 	uxth.w	lr, ip
 8000788:	fbb0 f3f7 	udiv	r3, r0, r7
 800078c:	fb07 0013 	mls	r0, r7, r3, r0
 8000790:	0c25      	lsrs	r5, r4, #16
 8000792:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000796:	fb0e f003 	mul.w	r0, lr, r3
 800079a:	42a8      	cmp	r0, r5
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x12c>
 800079e:	eb1c 0505 	adds.w	r5, ip, r5
 80007a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x12a>
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	f200 80ce 	bhi.w	800094a <__udivmoddi4+0x2c6>
 80007ae:	4643      	mov	r3, r8
 80007b0:	1a2d      	subs	r5, r5, r0
 80007b2:	fbb5 f0f7 	udiv	r0, r5, r7
 80007b6:	fb07 5510 	mls	r5, r7, r0, r5
 80007ba:	fb0e fe00 	mul.w	lr, lr, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007c4:	45a6      	cmp	lr, r4
 80007c6:	d908      	bls.n	80007da <__udivmoddi4+0x156>
 80007c8:	eb1c 0404 	adds.w	r4, ip, r4
 80007cc:	f100 35ff 	add.w	r5, r0, #4294967295
 80007d0:	d202      	bcs.n	80007d8 <__udivmoddi4+0x154>
 80007d2:	45a6      	cmp	lr, r4
 80007d4:	f200 80b6 	bhi.w	8000944 <__udivmoddi4+0x2c0>
 80007d8:	4628      	mov	r0, r5
 80007da:	eba4 040e 	sub.w	r4, r4, lr
 80007de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007e2:	e79e      	b.n	8000722 <__udivmoddi4+0x9e>
 80007e4:	f1c1 0720 	rsb	r7, r1, #32
 80007e8:	408b      	lsls	r3, r1
 80007ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f2:	fa25 fa07 	lsr.w	sl, r5, r7
 80007f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007fa:	fbba f8f9 	udiv	r8, sl, r9
 80007fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000802:	fb09 aa18 	mls	sl, r9, r8, sl
 8000806:	408d      	lsls	r5, r1
 8000808:	fa1f fe8c 	uxth.w	lr, ip
 800080c:	431d      	orrs	r5, r3
 800080e:	fa00 f301 	lsl.w	r3, r0, r1
 8000812:	fb08 f00e 	mul.w	r0, r8, lr
 8000816:	0c2c      	lsrs	r4, r5, #16
 8000818:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800081c:	42a0      	cmp	r0, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	d90b      	bls.n	800083c <__udivmoddi4+0x1b8>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f108 3aff 	add.w	sl, r8, #4294967295
 800082c:	f080 8088 	bcs.w	8000940 <__udivmoddi4+0x2bc>
 8000830:	42a0      	cmp	r0, r4
 8000832:	f240 8085 	bls.w	8000940 <__udivmoddi4+0x2bc>
 8000836:	f1a8 0802 	sub.w	r8, r8, #2
 800083a:	4464      	add	r4, ip
 800083c:	1a24      	subs	r4, r4, r0
 800083e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000842:	fb09 4410 	mls	r4, r9, r0, r4
 8000846:	fb00 fe0e 	mul.w	lr, r0, lr
 800084a:	b2ad      	uxth	r5, r5
 800084c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000850:	45a6      	cmp	lr, r4
 8000852:	d908      	bls.n	8000866 <__udivmoddi4+0x1e2>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 35ff 	add.w	r5, r0, #4294967295
 800085c:	d26c      	bcs.n	8000938 <__udivmoddi4+0x2b4>
 800085e:	45a6      	cmp	lr, r4
 8000860:	d96a      	bls.n	8000938 <__udivmoddi4+0x2b4>
 8000862:	3802      	subs	r0, #2
 8000864:	4464      	add	r4, ip
 8000866:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800086a:	fba0 9502 	umull	r9, r5, r0, r2
 800086e:	eba4 040e 	sub.w	r4, r4, lr
 8000872:	42ac      	cmp	r4, r5
 8000874:	46c8      	mov	r8, r9
 8000876:	46ae      	mov	lr, r5
 8000878:	d356      	bcc.n	8000928 <__udivmoddi4+0x2a4>
 800087a:	d053      	beq.n	8000924 <__udivmoddi4+0x2a0>
 800087c:	2e00      	cmp	r6, #0
 800087e:	d069      	beq.n	8000954 <__udivmoddi4+0x2d0>
 8000880:	ebb3 0208 	subs.w	r2, r3, r8
 8000884:	eb64 040e 	sbc.w	r4, r4, lr
 8000888:	fa22 f301 	lsr.w	r3, r2, r1
 800088c:	fa04 f707 	lsl.w	r7, r4, r7
 8000890:	431f      	orrs	r7, r3
 8000892:	40cc      	lsrs	r4, r1
 8000894:	e9c6 7400 	strd	r7, r4, [r6]
 8000898:	2100      	movs	r1, #0
 800089a:	e747      	b.n	800072c <__udivmoddi4+0xa8>
 800089c:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a0:	f1c2 0120 	rsb	r1, r2, #32
 80008a4:	fa25 f301 	lsr.w	r3, r5, r1
 80008a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ac:	fa20 f101 	lsr.w	r1, r0, r1
 80008b0:	4095      	lsls	r5, r2
 80008b2:	430d      	orrs	r5, r1
 80008b4:	fbb3 f1f7 	udiv	r1, r3, r7
 80008b8:	fb07 3311 	mls	r3, r7, r1, r3
 80008bc:	fa1f fe8c 	uxth.w	lr, ip
 80008c0:	0c28      	lsrs	r0, r5, #16
 80008c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008c6:	fb01 f30e 	mul.w	r3, r1, lr
 80008ca:	4283      	cmp	r3, r0
 80008cc:	fa04 f402 	lsl.w	r4, r4, r2
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x260>
 80008d2:	eb1c 0000 	adds.w	r0, ip, r0
 80008d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80008da:	d22f      	bcs.n	800093c <__udivmoddi4+0x2b8>
 80008dc:	4283      	cmp	r3, r0
 80008de:	d92d      	bls.n	800093c <__udivmoddi4+0x2b8>
 80008e0:	3902      	subs	r1, #2
 80008e2:	4460      	add	r0, ip
 80008e4:	1ac0      	subs	r0, r0, r3
 80008e6:	fbb0 f3f7 	udiv	r3, r0, r7
 80008ea:	fb07 0013 	mls	r0, r7, r3, r0
 80008ee:	b2ad      	uxth	r5, r5
 80008f0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f4:	fb03 f00e 	mul.w	r0, r3, lr
 80008f8:	42a8      	cmp	r0, r5
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x28a>
 80008fc:	eb1c 0505 	adds.w	r5, ip, r5
 8000900:	f103 38ff 	add.w	r8, r3, #4294967295
 8000904:	d216      	bcs.n	8000934 <__udivmoddi4+0x2b0>
 8000906:	42a8      	cmp	r0, r5
 8000908:	d914      	bls.n	8000934 <__udivmoddi4+0x2b0>
 800090a:	3b02      	subs	r3, #2
 800090c:	4465      	add	r5, ip
 800090e:	1a28      	subs	r0, r5, r0
 8000910:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000914:	e738      	b.n	8000788 <__udivmoddi4+0x104>
 8000916:	4631      	mov	r1, r6
 8000918:	4630      	mov	r0, r6
 800091a:	e707      	b.n	800072c <__udivmoddi4+0xa8>
 800091c:	462f      	mov	r7, r5
 800091e:	e6e4      	b.n	80006ea <__udivmoddi4+0x66>
 8000920:	4618      	mov	r0, r3
 8000922:	e6f9      	b.n	8000718 <__udivmoddi4+0x94>
 8000924:	454b      	cmp	r3, r9
 8000926:	d2a9      	bcs.n	800087c <__udivmoddi4+0x1f8>
 8000928:	ebb9 0802 	subs.w	r8, r9, r2
 800092c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000930:	3801      	subs	r0, #1
 8000932:	e7a3      	b.n	800087c <__udivmoddi4+0x1f8>
 8000934:	4643      	mov	r3, r8
 8000936:	e7ea      	b.n	800090e <__udivmoddi4+0x28a>
 8000938:	4628      	mov	r0, r5
 800093a:	e794      	b.n	8000866 <__udivmoddi4+0x1e2>
 800093c:	4641      	mov	r1, r8
 800093e:	e7d1      	b.n	80008e4 <__udivmoddi4+0x260>
 8000940:	46d0      	mov	r8, sl
 8000942:	e77b      	b.n	800083c <__udivmoddi4+0x1b8>
 8000944:	4464      	add	r4, ip
 8000946:	3802      	subs	r0, #2
 8000948:	e747      	b.n	80007da <__udivmoddi4+0x156>
 800094a:	3b02      	subs	r3, #2
 800094c:	4465      	add	r5, ip
 800094e:	e72f      	b.n	80007b0 <__udivmoddi4+0x12c>
 8000950:	4608      	mov	r0, r1
 8000952:	e706      	b.n	8000762 <__udivmoddi4+0xde>
 8000954:	4631      	mov	r1, r6
 8000956:	e6e9      	b.n	800072c <__udivmoddi4+0xa8>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <App_Init>:
	uint8_t button_1;
	uint8_t button_2;
	uint8_t backlight;
}app;

void App_Init(){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	//Resistors
	Resistors_Init();
 8000960:	f000 fa74 	bl	8000e4c <Resistors_Init>
	while(!Resistors_Ready());
 8000964:	bf00      	nop
 8000966:	f000 fa5f 	bl	8000e28 <Resistors_Ready>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0fa      	beq.n	8000966 <App_Init+0xa>
	Resistors_Get(&app.x, &app.y);
 8000970:	490d      	ldr	r1, [pc, #52]	; (80009a8 <App_Init+0x4c>)
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <App_Init+0x50>)
 8000974:	f000 f988 	bl	8000c88 <Resistors_Get>
	//Buttons
	app.button_1 = Buttons_Read(BUTTON_1_Pin);
 8000978:	2010      	movs	r0, #16
 800097a:	f000 f919 	bl	8000bb0 <Buttons_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <App_Init+0x50>)
 8000984:	709a      	strb	r2, [r3, #2]
	app.button_2 = Buttons_Read(BUTTON_2_Pin);
 8000986:	2020      	movs	r0, #32
 8000988:	f000 f912 	bl	8000bb0 <Buttons_Read>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <App_Init+0x50>)
 8000992:	70da      	strb	r2, [r3, #3]
	//Backlight
	Backlight_Init();
 8000994:	f000 f878 	bl	8000a88 <Backlight_Init>
	app.backlight = Backlight_Get();
 8000998:	f000 f85a 	bl	8000a50 <Backlight_Get>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <App_Init+0x50>)
 80009a2:	711a      	strb	r2, [r3, #4]
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000199 	.word	0x20000199
 80009ac:	20000198 	.word	0x20000198

080009b0 <App_Loop>:
void App_Loop(){
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af02      	add	r7, sp, #8
	//Resistors
	if(Resistors_Ready()){
 80009b6:	f000 fa37 	bl	8000e28 <Resistors_Ready>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <App_Loop+0x18>
		Resistors_Get(&app.x, &app.y);
 80009c0:	4921      	ldr	r1, [pc, #132]	; (8000a48 <App_Loop+0x98>)
 80009c2:	4822      	ldr	r0, [pc, #136]	; (8000a4c <App_Loop+0x9c>)
 80009c4:	f000 f960 	bl	8000c88 <Resistors_Get>
	}
	//Buttons
	if(Buttons_Pressed(BUTTON_1_Pin)){
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f8cb 	bl	8000b64 <Buttons_Pressed>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <App_Loop+0x32>
		app.button_1 = Buttons_Read(BUTTON_1_Pin);
 80009d4:	2010      	movs	r0, #16
 80009d6:	f000 f8eb 	bl	8000bb0 <Buttons_Read>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <App_Loop+0x9c>)
 80009e0:	709a      	strb	r2, [r3, #2]
	}
	if(Buttons_Pressed(BUTTON_2_Pin)){
 80009e2:	2020      	movs	r0, #32
 80009e4:	f000 f8be 	bl	8000b64 <Buttons_Pressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <App_Loop+0x4c>
		app.button_2 = Buttons_Read(BUTTON_2_Pin);
 80009ee:	2020      	movs	r0, #32
 80009f0:	f000 f8de 	bl	8000bb0 <Buttons_Read>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <App_Loop+0x9c>)
 80009fa:	70da      	strb	r2, [r3, #3]
	}
	//USB
	if(USB_Received()){
 80009fc:	f000 fa7a 	bl	8000ef4 <USB_Received>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <App_Loop+0x64>
		Backlight_Set(USB_Read_Brightness());
 8000a06:	f000 fa7f 	bl	8000f08 <USB_Read_Brightness>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f82a 	bl	8000a68 <Backlight_Set>
	}
	//Backlight
	app.backlight = Backlight_Get();
 8000a14:	f000 f81c 	bl	8000a50 <Backlight_Get>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <App_Loop+0x9c>)
 8000a1e:	711a      	strb	r2, [r3, #4]

	USB_Send(app.x, app.y, app.button_1, app.button_2, app.backlight);
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <App_Loop+0x9c>)
 8000a22:	f993 0000 	ldrsb.w	r0, [r3]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <App_Loop+0x9c>)
 8000a28:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <App_Loop+0x9c>)
 8000a2e:	789a      	ldrb	r2, [r3, #2]
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <App_Loop+0x9c>)
 8000a32:	78dc      	ldrb	r4, [r3, #3]
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <App_Loop+0x9c>)
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	f000 fa7c 	bl	8000f38 <USB_Send>
 8000a40:	bf00      	nop
 8000a42:	3704      	adds	r7, #4
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	20000199 	.word	0x20000199
 8000a4c:	20000198 	.word	0x20000198

08000a50 <Backlight_Get>:
#include "main.h"
#include "backlight.h"

extern TIM_HandleTypeDef htim3;

uint8_t Backlight_Get(){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	return (uint8_t)__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <Backlight_Get+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	b2db      	uxtb	r3, r3
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	200003b0 	.word	0x200003b0

08000a68 <Backlight_Set>:
void Backlight_Set(uint16_t backlight){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, backlight);
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <Backlight_Set+0x1c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	200003b0 	.word	0x200003b0

08000a88 <Backlight_Init>:
void Backlight_Init(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <Backlight_Init+0x38>)
 8000a92:	f004 fb99 	bl	80051c8 <HAL_TIM_PWM_Start>
	uint8_t i = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
	while(i != 100){
 8000a9a:	e009      	b.n	8000ab0 <Backlight_Init+0x28>
		i++;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(10);
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f000 fe22 	bl	80016ec <HAL_Delay>
		htim3.Instance->CCR1 = i;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <Backlight_Init+0x38>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
	while(i != 100){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b64      	cmp	r3, #100	; 0x64
 8000ab4:	d1f2      	bne.n	8000a9c <Backlight_Init+0x14>
	}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200003b0 	.word	0x200003b0

08000ac4 <Buttons_Interrupt>:
#include "buttons.h"

static uint8_t buttons_pressed_1 = 0;
static uint8_t buttons_pressed_2 = 0;

void Buttons_Interrupt(uint16_t GPIO_Pin){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_1_Pin){
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d103      	bne.n	8000adc <Buttons_Interrupt+0x18>
		buttons_pressed_1 = 1;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <Buttons_Interrupt+0x30>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_Pin == BUTTON_2_Pin){
		buttons_pressed_2 = 1;
	}
}
 8000ada:	e005      	b.n	8000ae8 <Buttons_Interrupt+0x24>
	}else if(GPIO_Pin == BUTTON_2_Pin){
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	2b20      	cmp	r3, #32
 8000ae0:	d102      	bne.n	8000ae8 <Buttons_Interrupt+0x24>
		buttons_pressed_2 = 1;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <Buttons_Interrupt+0x34>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000019d 	.word	0x2000019d
 8000af8:	2000019e 	.word	0x2000019e

08000afc <Buttons_Debounce_Read>:
uint8_t Buttons_Debounce_Read(GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
	uint8_t level;
	uint8_t d = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]
	while(d != 1){
 8000b10:	e01f      	b.n	8000b52 <Buttons_Debounce_Read+0x56>
		i = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	737b      	strb	r3, [r7, #13]
		level = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f002 f854 	bl	8002bc8 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000b24:	e012      	b.n	8000b4c <Buttons_Debounce_Read+0x50>
			i++;
 8000b26:	7b7b      	ldrb	r3, [r7, #13]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	737b      	strb	r3, [r7, #13]
			if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) != level){
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f002 f849 	bl	8002bc8 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d000      	beq.n	8000b42 <Buttons_Debounce_Read+0x46>
				break;
 8000b40:	e007      	b.n	8000b52 <Buttons_Debounce_Read+0x56>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8000b42:	7b7b      	ldrb	r3, [r7, #13]
 8000b44:	2b0a      	cmp	r3, #10
 8000b46:	d101      	bne.n	8000b4c <Buttons_Debounce_Read+0x50>
				d = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73bb      	strb	r3, [r7, #14]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000b4c:	7b7b      	ldrb	r3, [r7, #13]
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d1e9      	bne.n	8000b26 <Buttons_Debounce_Read+0x2a>
	while(d != 1){
 8000b52:	7bbb      	ldrb	r3, [r7, #14]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d1dc      	bne.n	8000b12 <Buttons_Debounce_Read+0x16>
			}
		}
	}
	return level;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Buttons_Pressed>:
uint8_t Buttons_Pressed(uint16_t GPIO_Pin){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
	switch(GPIO_Pin){
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b10      	cmp	r3, #16
 8000b76:	d002      	beq.n	8000b7e <Buttons_Pressed+0x1a>
 8000b78:	2b20      	cmp	r3, #32
 8000b7a:	d007      	beq.n	8000b8c <Buttons_Pressed+0x28>
 8000b7c:	e00d      	b.n	8000b9a <Buttons_Pressed+0x36>
		case BUTTON_1_Pin:
			ret = buttons_pressed_1;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <Buttons_Pressed+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	73fb      	strb	r3, [r7, #15]
			buttons_pressed_1 = 0;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <Buttons_Pressed+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		break;
 8000b8a:	e006      	b.n	8000b9a <Buttons_Pressed+0x36>
		case BUTTON_2_Pin:
			ret = buttons_pressed_2;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Buttons_Pressed+0x48>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	73fb      	strb	r3, [r7, #15]
			buttons_pressed_2 = 0;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Buttons_Pressed+0x48>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
		break;
 8000b98:	bf00      	nop
	}
	return ret;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000019d 	.word	0x2000019d
 8000bac:	2000019e 	.word	0x2000019e

08000bb0 <Buttons_Read>:
uint8_t Buttons_Read(uint16_t GPIO_Pin){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d002      	beq.n	8000bc6 <Buttons_Read+0x16>
 8000bc0:	2b20      	cmp	r3, #32
 8000bc2:	d009      	beq.n	8000bd8 <Buttons_Read+0x28>
 8000bc4:	e011      	b.n	8000bea <Buttons_Read+0x3a>
		case BUTTON_1_Pin:
			return 1 - Buttons_Debounce_Read(GPIOA, BUTTON_1_Pin);
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <Buttons_Read+0x44>)
 8000bca:	f7ff ff97 	bl	8000afc <Buttons_Debounce_Read>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f1c3 0301 	rsb	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	e009      	b.n	8000bec <Buttons_Read+0x3c>
		break;
		case BUTTON_2_Pin:
			return 1 - Buttons_Debounce_Read(GPIOA, BUTTON_2_Pin);
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <Buttons_Read+0x44>)
 8000bdc:	f7ff ff8e 	bl	8000afc <Buttons_Debounce_Read>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f1c3 0301 	rsb	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	e000      	b.n	8000bec <Buttons_Read+0x3c>
		break;
	}
	return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <HAL_ADC_ConvCpltCallback>:
#include "main.h"
#include "resistors.h"
#include "buttons.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_ADC_ConvCpltCallback+0x16>
		Resistors_Interrupt();
 8000c0a:	f000 f81b 	bl	8000c44 <Resistors_Interrupt>
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012400 	.word	0x40012400

08000c1c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == BUTTON_1_Pin) || (GPIO_Pin == BUTTON_2_Pin)){
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2b10      	cmp	r3, #16
 8000c2a:	d002      	beq.n	8000c32 <HAL_GPIO_EXTI_Callback+0x16>
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d103      	bne.n	8000c3a <HAL_GPIO_EXTI_Callback+0x1e>
		Buttons_Interrupt(GPIO_Pin);
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff45 	bl	8000ac4 <Buttons_Interrupt>
	}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <Resistors_Interrupt>:
	uint16_t x;
	uint16_t y;
	uint16_t buffer[200];
}resistors;

void Resistors_Interrupt(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <Resistors_Interrupt+0x20>)
 8000c4a:	f000 ff29 	bl	8001aa0 <HAL_ADC_Stop_DMA>
	CLEAR_BIT(hadc1.State, HAL_ADC_STATE_ERROR_DMA);
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <Resistors_Interrupt+0x20>)
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c56:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <Resistors_Interrupt+0x20>)
 8000c58:	6293      	str	r3, [r2, #40]	; 0x28
	resistors.ready = 1;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <Resistors_Interrupt+0x24>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000033c 	.word	0x2000033c
 8000c68:	200001a0 	.word	0x200001a0

08000c6c <Resistors_Start>:
void Resistors_Start(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&resistors.buffer[0], 200);
 8000c70:	22c8      	movs	r2, #200	; 0xc8
 8000c72:	4903      	ldr	r1, [pc, #12]	; (8000c80 <Resistors_Start+0x14>)
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <Resistors_Start+0x18>)
 8000c76:	f000 fe35 	bl	80018e4 <HAL_ADC_Start_DMA>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001a6 	.word	0x200001a6
 8000c84:	2000033c 	.word	0x2000033c

08000c88 <Resistors_Get>:

void Resistors_Get(int8_t *x, int8_t *y){
 8000c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c8c:	b088      	sub	sp, #32
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
	//Calculate median
	uint64_t sum = 0;
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82fb      	strh	r3, [r7, #22]
	while(i < 200){
 8000ca4:	e017      	b.n	8000cd6 <Resistors_Get+0x4e>
		sum += resistors.buffer[i];
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	4a5d      	ldr	r2, [pc, #372]	; (8000e20 <Resistors_Get+0x198>)
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	88db      	ldrh	r3, [r3, #6]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	4691      	mov	r9, r2
 8000cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cbc:	eb12 0108 	adds.w	r1, r2, r8
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	eb43 0309 	adc.w	r3, r3, r9
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		i += 2;
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	82fb      	strh	r3, [r7, #22]
	while(i < 200){
 8000cd6:	8afb      	ldrh	r3, [r7, #22]
 8000cd8:	2bc7      	cmp	r3, #199	; 0xc7
 8000cda:	d9e4      	bls.n	8000ca6 <Resistors_Get+0x1e>
	}
	resistors.x = (uint16_t)((uint64_t)sum / 100);
 8000cdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce0:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	f7ff fcb4 	bl	8000654 <__aeabi_uldivmod>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	b292      	uxth	r2, r2
 8000cf2:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <Resistors_Get+0x198>)
 8000cf4:	805a      	strh	r2, [r3, #2]
	sum = 0;
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	i = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	82fb      	strh	r3, [r7, #22]
	while(i < 200){
 8000d06:	e013      	b.n	8000d30 <Resistors_Get+0xa8>
		sum += resistors.buffer[i];
 8000d08:	8afb      	ldrh	r3, [r7, #22]
 8000d0a:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <Resistors_Get+0x198>)
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	88db      	ldrh	r3, [r3, #6]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	461c      	mov	r4, r3
 8000d18:	4615      	mov	r5, r2
 8000d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d1e:	eb12 0a04 	adds.w	sl, r2, r4
 8000d22:	eb43 0b05 	adc.w	fp, r3, r5
 8000d26:	e9c7 ab06 	strd	sl, fp, [r7, #24]
		i += 2;
 8000d2a:	8afb      	ldrh	r3, [r7, #22]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	82fb      	strh	r3, [r7, #22]
	while(i < 200){
 8000d30:	8afb      	ldrh	r3, [r7, #22]
 8000d32:	2bc7      	cmp	r3, #199	; 0xc7
 8000d34:	d9e8      	bls.n	8000d08 <Resistors_Get+0x80>
	}
	resistors.y = (uint16_t)((uint64_t)sum / 100);
 8000d36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d3a:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	f7ff fc87 	bl	8000654 <__aeabi_uldivmod>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <Resistors_Get+0x198>)
 8000d4e:	809a      	strh	r2, [r3, #4]

	//Convert for -127 0 +127 scale
	int8_t tmp = (float)resistors.x / (4096.0f / 255.0f);
 8000d50:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <Resistors_Get+0x198>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff faaf 	bl	80002b8 <__aeabi_ui2f>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4931      	ldr	r1, [pc, #196]	; (8000e24 <Resistors_Get+0x19c>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fbb6 	bl	80004d0 <__aeabi_fdiv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc4e 	bl	8000608 <__aeabi_f2iz>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	757b      	strb	r3, [r7, #21]
	if((tmp >= 0) && (tmp <= 126)){
 8000d70:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db08      	blt.n	8000d8a <Resistors_Get+0x102>
 8000d78:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7e:	d004      	beq.n	8000d8a <Resistors_Get+0x102>
		tmp = -(127 - tmp);
 8000d80:	7d7b      	ldrb	r3, [r7, #21]
 8000d82:	3b7f      	subs	r3, #127	; 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	757b      	strb	r3, [r7, #21]
 8000d88:	e00f      	b.n	8000daa <Resistors_Get+0x122>
	}else if((tmp >= -128) && (tmp <= -2)){
 8000d8a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d92:	da04      	bge.n	8000d9e <Resistors_Get+0x116>
		tmp += 129;
 8000d94:	7d7b      	ldrb	r3, [r7, #21]
 8000d96:	3b7f      	subs	r3, #127	; 0x7f
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	757b      	strb	r3, [r7, #21]
 8000d9c:	e005      	b.n	8000daa <Resistors_Get+0x122>
	}else if(tmp == 127){
 8000d9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000da2:	2b7f      	cmp	r3, #127	; 0x7f
 8000da4:	d101      	bne.n	8000daa <Resistors_Get+0x122>
		tmp = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	757b      	strb	r3, [r7, #21]
	}
	*x = tmp;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	7d7a      	ldrb	r2, [r7, #21]
 8000dae:	701a      	strb	r2, [r3, #0]

	tmp = (float)resistors.y / (4096.0f / 255.0f);
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <Resistors_Get+0x198>)
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa7f 	bl	80002b8 <__aeabi_ui2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4919      	ldr	r1, [pc, #100]	; (8000e24 <Resistors_Get+0x19c>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fb86 	bl	80004d0 <__aeabi_fdiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc1e 	bl	8000608 <__aeabi_f2iz>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	757b      	strb	r3, [r7, #21]
	if((tmp >= 0) && (tmp <= 126)){
 8000dd0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db08      	blt.n	8000dea <Resistors_Get+0x162>
 8000dd8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dde:	d004      	beq.n	8000dea <Resistors_Get+0x162>
		tmp = -(127 - tmp);
 8000de0:	7d7b      	ldrb	r3, [r7, #21]
 8000de2:	3b7f      	subs	r3, #127	; 0x7f
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	757b      	strb	r3, [r7, #21]
 8000de8:	e00f      	b.n	8000e0a <Resistors_Get+0x182>
	}else if((tmp >= -128) && (tmp <= -2)){
 8000dea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	da04      	bge.n	8000dfe <Resistors_Get+0x176>
		tmp += 129;
 8000df4:	7d7b      	ldrb	r3, [r7, #21]
 8000df6:	3b7f      	subs	r3, #127	; 0x7f
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	757b      	strb	r3, [r7, #21]
 8000dfc:	e005      	b.n	8000e0a <Resistors_Get+0x182>
	}else if(tmp == 127){
 8000dfe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d101      	bne.n	8000e0a <Resistors_Get+0x182>
		tmp = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	757b      	strb	r3, [r7, #21]
	}
	*y = tmp;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	7d7a      	ldrb	r2, [r7, #21]
 8000e0e:	701a      	strb	r2, [r3, #0]

	Resistors_Start();
 8000e10:	f7ff ff2c 	bl	8000c6c <Resistors_Start>
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001a0 	.word	0x200001a0
 8000e24:	41808081 	.word	0x41808081

08000e28 <Resistors_Ready>:
uint8_t Resistors_Ready(){
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	if(resistors.ready){
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <Resistors_Ready+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <Resistors_Ready+0x16>
		resistors.ready = 0;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <Resistors_Ready+0x20>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <Resistors_Ready+0x18>
	}
	return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200001a0 	.word	0x200001a0

08000e4c <Resistors_Init>:
void Resistors_Init(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <Resistors_Init+0x14>)
 8000e52:	f001 f949 	bl	80020e8 <HAL_ADCEx_Calibration_Start>
	Resistors_Start();
 8000e56:	f7ff ff09 	bl	8000c6c <Resistors_Start>
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000033c 	.word	0x2000033c

08000e64 <USB_Store_Button>:
static uint8_t usb_brightness = 100;
static uint8_t usb_report[] = {
	//Bits: [XXXXXXXX][YYYYYYYY][BUTTON_1][BUTTON_2][0][0][0][0][0][0][BBBBBBBB]
	0, 0, 0b00000000, 0
};
void USB_Store_Button(uint8_t button, uint8_t state){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
	if(state){
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00d      	beq.n	8000e96 <USB_Store_Button+0x32>
		usb_report[2] |= 1 << button;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <USB_Store_Button+0x5c>)
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <USB_Store_Button+0x5c>)
 8000e92:	709a      	strb	r2, [r3, #2]
	}else{
		usb_report[2] &= ~(1 << button);
	}
}
 8000e94:	e00e      	b.n	8000eb4 <USB_Store_Button+0x50>
		usb_report[2] &= ~(1 << button);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <USB_Store_Button+0x5c>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	b25a      	sxtb	r2, r3
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <USB_Store_Button+0x5c>)
 8000eb2:	709a      	strb	r2, [r3, #2]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000338 	.word	0x20000338

08000ec4 <USB_Interrupt>:
void USB_Interrupt(uint8_t *data){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if(!usb_received){
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <USB_Interrupt+0x28>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d106      	bne.n	8000ee2 <USB_Interrupt+0x1e>
		usb_brightness = data[0];
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <USB_Interrupt+0x2c>)
 8000eda:	701a      	strb	r2, [r3, #0]
		usb_received = 1;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <USB_Interrupt+0x28>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000336 	.word	0x20000336
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <USB_Received>:

uint8_t USB_Received(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	return usb_received;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <USB_Received+0x10>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000336 	.word	0x20000336

08000f08 <USB_Read_Brightness>:
uint8_t USB_Read_Brightness(){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
	uint8_t ret = usb_brightness;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <USB_Read_Brightness+0x28>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
	if(ret > 100){
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <USB_Read_Brightness+0x16>
		ret = 100;
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	71fb      	strb	r3, [r7, #7]
	}
	usb_received = 0;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <USB_Read_Brightness+0x2c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	return ret;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000336 	.word	0x20000336

08000f38 <USB_Send>:
void USB_Send(int8_t x, int8_t y, uint8_t button_1, uint8_t button_2, uint8_t backlight){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	717b      	strb	r3, [r7, #5]
 8000f52:	4613      	mov	r3, r2
 8000f54:	713b      	strb	r3, [r7, #4]
	usb_report[0] = *(uint8_t *)&x;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <USB_Send+0x5c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	usb_report[1] = *(uint8_t *)&y;
 8000f5e:	1dbb      	adds	r3, r7, #6
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <USB_Send+0x5c>)
 8000f64:	705a      	strb	r2, [r3, #1]
	USB_Store_Button(0, button_1);
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff7a 	bl	8000e64 <USB_Store_Button>
	USB_Store_Button(1, button_2);
 8000f70:	793b      	ldrb	r3, [r7, #4]
 8000f72:	4619      	mov	r1, r3
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff ff75 	bl	8000e64 <USB_Store_Button>
	usb_report[3] = backlight;
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <USB_Send+0x5c>)
 8000f7c:	7e3b      	ldrb	r3, [r7, #24]
 8000f7e:	70d3      	strb	r3, [r2, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, usb_report, sizeof(usb_report));
 8000f80:	2204      	movs	r2, #4
 8000f82:	4904      	ldr	r1, [pc, #16]	; (8000f94 <USB_Send+0x5c>)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <USB_Send+0x60>)
 8000f86:	f007 fd81 	bl	8008a8c <USBD_CUSTOM_HID_SendReport>
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000338 	.word	0x20000338
 8000f98:	20000400 	.word	0x20000400

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fb42 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f80f 	bl	8000fc6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 f94c 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fac:	f000 f92c 	bl	8001208 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb0:	f000 f866 	bl	8001080 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fb4:	f000 f8b2 	bl	800111c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000fb8:	f008 fed0 	bl	8009d5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8000fbc:	f7ff fcce 	bl	800095c <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8000fc0:	f7ff fcf6 	bl	80009b0 <App_Loop>
 8000fc4:	e7fc      	b.n	8000fc0 <main+0x24>

08000fc6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b094      	sub	sp, #80	; 0x50
 8000fca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd0:	2228      	movs	r2, #40	; 0x28
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 fad7 	bl	800a588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001012:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101c:	4618      	mov	r0, r3
 800101e:	f003 faaf 	bl	8004580 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001028:	f000 f954 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2102      	movs	r1, #2
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fd1b 	bl	8004a84 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001054:	f000 f93e 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001058:	2312      	movs	r3, #18
 800105a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800105c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001060:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fe8f 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001074:	f000 f92e 	bl	80012d4 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	; 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0x94>)
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_ADC1_Init+0x98>)
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC1_Init+0x94>)
 8001098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC1_Init+0x94>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ADC1_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0x94>)
 80010ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ADC1_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_ADC1_Init+0x94>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <MX_ADC1_Init+0x94>)
 80010c0:	f000 fb38 	bl	8001734 <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010ca:	f000 f903 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010d6:	2307      	movs	r3, #7
 80010d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <MX_ADC1_Init+0x94>)
 80010e0:	f000 fe08 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f000 f8f3 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0x94>)
 80010fc:	f000 fdfa 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001106:	f000 f8e5 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000033c 	.word	0x2000033c
 8001118:	40012400 	.word	0x40012400

0800111c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_TIM3_Init+0xe4>)
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <MX_TIM3_Init+0xe8>)
 8001150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <MX_TIM3_Init+0xe4>)
 8001154:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_TIM3_Init+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_TIM3_Init+0xe4>)
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_TIM3_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <MX_TIM3_Init+0xe4>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <MX_TIM3_Init+0xe4>)
 8001174:	f003 ff80 	bl	8005078 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800117e:	f000 f8a9 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118c:	4619      	mov	r1, r3
 800118e:	481c      	ldr	r0, [pc, #112]	; (8001200 <MX_TIM3_Init+0xe4>)
 8001190:	f004 f97a 	bl	8005488 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800119a:	f000 f89b 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <MX_TIM3_Init+0xe4>)
 80011a0:	f003 ffb9 	bl	8005116 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011aa:	f000 f893 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <MX_TIM3_Init+0xe4>)
 80011be:	f004 fccb 	bl	8005b58 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011c8:	f000 f884 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011cc:	2360      	movs	r3, #96	; 0x60
 80011ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <MX_TIM3_Init+0xe4>)
 80011e4:	f004 f892 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ee:	f000 f871 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <MX_TIM3_Init+0xe4>)
 80011f4:	f000 f934 	bl	8001460 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	; 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003b0 	.word	0x200003b0
 8001204:	40000400 	.word	0x40000400

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200b      	movs	r0, #11
 800122c:	f001 f8e9 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	200b      	movs	r0, #11
 8001232:	f001 f902 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_GPIO_Init+0x84>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <MX_GPIO_Init+0x84>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_GPIO_Init+0x84>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_GPIO_Init+0x84>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x84>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_GPIO_Init+0x84>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8001288:	2330      	movs	r3, #48	; 0x30
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_GPIO_Init+0x88>)
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_GPIO_Init+0x8c>)
 800129c:	f001 fb10 	bl	80028c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	200a      	movs	r0, #10
 80012a6:	f001 f8ac 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f001 f8c5 	bl	800243a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2017      	movs	r0, #23
 80012b6:	f001 f8a4 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ba:	2017      	movs	r0, #23
 80012bc:	f001 f8bd 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	40010800 	.word	0x40010800

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_MspInit+0x5c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_MspInit+0x5c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_MspInit+0x60>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_MspInit+0x60>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000

08001344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <HAL_ADC_MspInit+0xcc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d151      	bne.n	8001408 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_ADC_MspInit+0xd0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 8001394:	2306      	movs	r3, #6
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <HAL_ADC_MspInit+0xd4>)
 80013a4:	f001 fa8c 	bl	80028c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_ADC_MspInit+0xdc>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013de:	f001 f847 	bl	8002470 <HAL_DMA_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80013e8:	f7ff ff74 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013f0:	621a      	str	r2, [r3, #32]
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_ADC_MspInit+0xd8>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2012      	movs	r0, #18
 80013fe:	f001 f800 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001402:	2012      	movs	r0, #18
 8001404:	f001 f819 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40012400 	.word	0x40012400
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	2000036c 	.word	0x2000036c
 8001420:	40020008 	.word	0x40020008

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_TIM_Base_MspInit+0x34>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10b      	bne.n	800144e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40000400 	.word	0x40000400
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_TIM_MspPostInit+0x58>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d117      	bne.n	80014b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0x5c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_TIM_MspPostInit+0x5c>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_TIM_MspPostInit+0x5c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 8001498:	2340      	movs	r3, #64	; 0x40
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_TIM_MspPostInit+0x60>)
 80014ac:	f001 fa08 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010800 	.word	0x40010800

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <HardFault_Handler+0x4>

080014d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <BusFault_Handler+0x4>

080014e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8d0 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 800151c:	2010      	movs	r0, #16
 800151e:	f001 fb6b 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA1_Channel1_IRQHandler+0x10>)
 800152e:	f001 f893 	bl	8002658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000036c 	.word	0x2000036c

0800153c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <ADC1_2_IRQHandler+0x10>)
 8001542:	f000 faf8 	bl	8001b36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000033c 	.word	0x2000033c

08001550 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001556:	f001 fc98 	bl	8002e8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200008c4 	.word	0x200008c4

08001564 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8001568:	2020      	movs	r0, #32
 800156a:	f001 fb45 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <SystemInit+0x5c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <SystemInit+0x5c>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <SystemInit+0x5c>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4911      	ldr	r1, [pc, #68]	; (80015d0 <SystemInit+0x5c>)
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <SystemInit+0x60>)
 800158c:	4013      	ands	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <SystemInit+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <SystemInit+0x5c>)
 8001596:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800159a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <SystemInit+0x5c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SystemInit+0x5c>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <SystemInit+0x5c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <SystemInit+0x5c>)
 80015b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SystemInit+0x5c>)
 80015ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SystemInit+0x64>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	f8ff0000 	.word	0xf8ff0000
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffb7 	bl	8001574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f008 ff9b 	bl	800a540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fcc7 	bl	8000f9c <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r3, =_sidata
 8001610:	0800a638 	.word	0x0800a638
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001618:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 800161c:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8001620:	20000c08 	.word	0x20000c08

08001624 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <CAN1_RX1_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x28>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 fed7 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fe4c 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 feef 	bl	8002456 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 feb7 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000004 	.word	0x20000004
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x1c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x20>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_IncTick+0x20>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	200003f8 	.word	0x200003f8

080016d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <HAL_GetTick+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	200003f8 	.word	0x200003f8

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff fff0 	bl	80016d8 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_Delay+0x44>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffe0 	bl	80016d8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000000c 	.word	0x2000000c

08001734 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0be      	b.n	80018d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fde6 	bl	8001344 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fc0d 	bl	8001f98 <ADC_ConversionStop_Disable>
 800177e:	4603      	mov	r3, r0
 8001780:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 8099 	bne.w	80018c2 <HAL_ADC_Init+0x18e>
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8095 	bne.w	80018c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a0:	f023 0302 	bic.w	r3, r3, #2
 80017a4:	f043 0202 	orr.w	r2, r3, #2
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
 80017ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017cc:	d003      	beq.n	80017d6 <HAL_ADC_Init+0xa2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_ADC_Init+0xa8>
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	e000      	b.n	80017de <HAL_ADC_Init+0xaa>
 80017dc:	2300      	movs	r3, #0
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d1b      	ldrb	r3, [r3, #20]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d119      	bne.n	8001820 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	035a      	lsls	r2, r3, #13
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_ADC_Init+0x1a8>)
 800183c:	4013      	ands	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	430b      	orrs	r3, r1
 8001846:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001850:	d003      	beq.n	800185a <HAL_ADC_Init+0x126>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d104      	bne.n	8001864 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	3b01      	subs	r3, #1
 8001860:	051b      	lsls	r3, r3, #20
 8001862:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	430a      	orrs	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_ADC_Init+0x1ac>)
 8001880:	4013      	ands	r3, r2
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d10b      	bne.n	80018a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189e:	e018      	b.n	80018d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f023 0312 	bic.w	r3, r3, #18
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c0:	e007      	b.n	80018d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	ffe1f7fd 	.word	0xffe1f7fd
 80018e0:	ff1f0efe 	.word	0xff1f0efe

080018e4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a64      	ldr	r2, [pc, #400]	; (8001a8c <HAL_ADC_Start_DMA+0x1a8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d004      	beq.n	8001908 <HAL_ADC_Start_DMA+0x24>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_ADC_Start_DMA+0x1ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d106      	bne.n	8001916 <HAL_ADC_Start_DMA+0x32>
 8001908:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_ADC_Start_DMA+0x1a8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 80b3 	bne.w	8001a7c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_Start_DMA+0x40>
 8001920:	2302      	movs	r3, #2
 8001922:	e0ae      	b.n	8001a82 <HAL_ADC_Start_DMA+0x19e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fad9 	bl	8001ee4 <ADC_Enable>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 809a 	bne.w	8001a72 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_ADC_Start_DMA+0x1ac>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d105      	bne.n	8001968 <HAL_ADC_Start_DMA+0x84>
 800195c:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_ADC_Start_DMA+0x1a8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d115      	bne.n	8001994 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	2b00      	cmp	r3, #0
 8001980:	d026      	beq.n	80019d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001992:	e01d      	b.n	80019d0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <HAL_ADC_Start_DMA+0x1a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_Start_DMA+0xd0>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_ADC_Start_DMA+0x1ac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10d      	bne.n	80019d0 <HAL_ADC_Start_DMA+0xec>
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_ADC_Start_DMA+0x1a8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f023 0206 	bic.w	r2, r3, #6
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e8:	e002      	b.n	80019f0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <HAL_ADC_Start_DMA+0x1b0>)
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <HAL_ADC_Start_DMA+0x1b4>)
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <HAL_ADC_Start_DMA+0x1b8>)
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0202 	mvn.w	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a28:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a18      	ldr	r0, [r3, #32]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	334c      	adds	r3, #76	; 0x4c
 8001a34:	4619      	mov	r1, r3
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f000 fd73 	bl	8002524 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a4c:	d108      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a5c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a5e:	e00f      	b.n	8001a80 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a6e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a70:	e006      	b.n	8001a80 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a7a:	e001      	b.n	8001a80 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012400 	.word	0x40012400
 8001a90:	40012800 	.word	0x40012800
 8001a94:	0800201b 	.word	0x0800201b
 8001a98:	08002097 	.word	0x08002097
 8001a9c:	080020b3 	.word	0x080020b3

08001aa0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Stop_DMA+0x1a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e039      	b.n	8001b2e <HAL_ADC_Stop_DMA+0x8e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa68 	bl	8001f98 <ADC_ConversionStop_Disable>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d128      	bne.n	8001b24 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d11a      	bne.n	8001b24 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fd75 	bl	80025e2 <HAL_DMA_Abort>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
 8001b16:	e005      	b.n	8001b24 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d140      	bne.n	8001bce <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d139      	bne.n	8001bce <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b80:	d11d      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0220 	bic.w	r2, r2, #32
 8001b98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff f81a 	bl	8000bf8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0212 	mvn.w	r2, #18
 8001bcc:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	2b80      	cmp	r3, #128	; 0x80
 8001bda:	d14f      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d148      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c0c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c10:	d012      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d125      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c2e:	d11d      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d119      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fae7 	bl	8002240 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 020c 	mvn.w	r2, #12
 8001c7a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d114      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10d      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f812 	bl	8001cce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f06f 0201 	mvn.w	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x20>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0dc      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1da>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d81c      	bhi.n	8001d5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b05      	subs	r3, #5
 8001d36:	221f      	movs	r2, #31
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4019      	ands	r1, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b05      	subs	r3, #5
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5c:	e03c      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d81c      	bhi.n	8001da0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	; 0x23
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4019      	ands	r1, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b23      	subs	r3, #35	; 0x23
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9e:	e01b      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b41      	subs	r3, #65	; 0x41
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b41      	subs	r3, #65	; 0x41
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d91c      	bls.n	8001e1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	3b1e      	subs	r3, #30
 8001df2:	2207      	movs	r2, #7
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4019      	ands	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6898      	ldr	r0, [r3, #8]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	e019      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6919      	ldr	r1, [r3, #16]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4019      	ands	r1, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6898      	ldr	r0, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d003      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e5a:	2b11      	cmp	r3, #17
 8001e5c:	d132      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d125      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d126      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_ConfigChannel+0x1e8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	0c9a      	lsrs	r2, r3, #18
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea4:	e002      	b.n	8001eac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f9      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x1b2>
 8001eb2:	e007      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40012400 	.word	0x40012400
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d040      	beq.n	8001f84 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <ADC_Enable+0xac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <ADC_Enable+0xb0>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f20:	e002      	b.n	8001f28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2e:	f7ff fbd3 	bl	80016d8 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f34:	e01f      	b.n	8001f76 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f36:	f7ff fbcf 	bl	80016d8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d918      	bls.n	8001f76 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d011      	beq.n	8001f76 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e007      	b.n	8001f86 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d1d8      	bne.n	8001f36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000004 	.word	0x20000004
 8001f94:	431bde83 	.word	0x431bde83

08001f98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12e      	bne.n	8002010 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fc2:	f7ff fb89 	bl	80016d8 <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	e01b      	b.n	8002002 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fca:	f7ff fb85 	bl	80016d8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d914      	bls.n	8002002 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10d      	bne.n	8002002 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d0dc      	beq.n	8001fca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002030:	2b00      	cmp	r3, #0
 8002032:	d127      	bne.n	8002084 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800204a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800204e:	d115      	bne.n	800207c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7fe fdbb 	bl	8000bf8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002082:	e004      	b.n	800208e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff fe09 	bl	8001cbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fe01 	bl	8001ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADCEx_Calibration_Start+0x1e>
 8002102:	2302      	movs	r3, #2
 8002104:	e095      	b.n	8002232 <HAL_ADCEx_Calibration_Start+0x14a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff42 	bl	8001f98 <ADC_ConversionStop_Disable>
 8002114:	4603      	mov	r3, r0
 8002116:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8084 	bne.w	8002228 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	f043 0202 	orr.w	r2, r3, #2
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_ADCEx_Calibration_Start+0x154>)
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	2002      	movs	r0, #2
 800213a:	f002 fedd 	bl	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq>
 800213e:	4603      	mov	r3, r0
 8002140:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002144:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002146:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002148:	e002      	b.n	8002150 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3b01      	subs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fec4 	bl	8001ee4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0208 	orr.w	r2, r2, #8
 800216a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800216c:	f7ff fab4 	bl	80016d8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002172:	e01b      	b.n	80021ac <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002174:	f7ff fab0 	bl	80016d8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d914      	bls.n	80021ac <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f023 0312 	bic.w	r3, r3, #18
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e042      	b.n	8002232 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1dc      	bne.n	8002174 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0204 	orr.w	r2, r2, #4
 80021c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021ca:	f7ff fa85 	bl	80016d8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021d0:	e01b      	b.n	800220a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021d2:	f7ff fa81 	bl	80016d8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b0a      	cmp	r3, #10
 80021de:	d914      	bls.n	800220a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f023 0312 	bic.w	r3, r3, #18
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e013      	b.n	8002232 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1dc      	bne.n	80021d2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f023 0303 	bic.w	r3, r3, #3
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002230:	7dfb      	ldrb	r3, [r7, #23]
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4906      	ldr	r1, [pc, #24]	; (80022ec <__NVIC_EnableIRQ+0x34>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff90 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff2d 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff42 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff90 	bl	8002344 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5f 	bl	80022f0 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff35 	bl	80022b8 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e043      	b.n	800250e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_DMA_Init+0xa8>)
 800248e:	4413      	add	r3, r2
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_DMA_Init+0xac>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	009a      	lsls	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_DMA_Init+0xb0>)
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	bffdfff8 	.word	0xbffdfff8
 800251c:	cccccccd 	.word	0xcccccccd
 8002520:	40020000 	.word	0x40020000

08002524 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_DMA_Start_IT+0x20>
 8002540:	2302      	movs	r3, #2
 8002542:	e04a      	b.n	80025da <HAL_DMA_Start_IT+0xb6>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002552:	2b01      	cmp	r3, #1
 8002554:	d13a      	bne.n	80025cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f972 	bl	8002864 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 020e 	orr.w	r2, r2, #14
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e00f      	b.n	80025ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0204 	bic.w	r2, r2, #4
 80025a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 020a 	orr.w	r2, r2, #10
 80025b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e005      	b.n	80025d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
 80025d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e020      	b.n	800264c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 020e 	bic.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f202 	lsl.w	r2, r1, r2
 8002638:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2204      	movs	r2, #4
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d04f      	beq.n	8002720 <HAL_DMA_IRQHandler+0xc8>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d04a      	beq.n	8002720 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a66      	ldr	r2, [pc, #408]	; (8002848 <HAL_DMA_IRQHandler+0x1f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d029      	beq.n	8002706 <HAL_DMA_IRQHandler+0xae>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_DMA_IRQHandler+0x1f4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_IRQHandler+0xaa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_DMA_IRQHandler+0x1f8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01a      	beq.n	80026fc <HAL_DMA_IRQHandler+0xa4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a62      	ldr	r2, [pc, #392]	; (8002854 <HAL_DMA_IRQHandler+0x1fc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x9e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a60      	ldr	r2, [pc, #384]	; (8002858 <HAL_DMA_IRQHandler+0x200>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x98>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5f      	ldr	r2, [pc, #380]	; (800285c <HAL_DMA_IRQHandler+0x204>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <HAL_DMA_IRQHandler+0x92>
 80026e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e8:	e00e      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 80026ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ee:	e00b      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 80026f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026f4:	e008      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 80026f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026fa:	e005      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 80026fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002700:	e002      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	e000      	b.n	8002708 <HAL_DMA_IRQHandler+0xb0>
 8002706:	2304      	movs	r3, #4
 8002708:	4a55      	ldr	r2, [pc, #340]	; (8002860 <HAL_DMA_IRQHandler+0x208>)
 800270a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8094 	beq.w	800283e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800271e:	e08e      	b.n	800283e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2202      	movs	r2, #2
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d056      	beq.n	80027de <HAL_DMA_IRQHandler+0x186>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d051      	beq.n	80027de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020a 	bic.w	r2, r2, #10
 8002756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_DMA_IRQHandler+0x1f0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d029      	beq.n	80027be <HAL_DMA_IRQHandler+0x166>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a37      	ldr	r2, [pc, #220]	; (800284c <HAL_DMA_IRQHandler+0x1f4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <HAL_DMA_IRQHandler+0x162>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a35      	ldr	r2, [pc, #212]	; (8002850 <HAL_DMA_IRQHandler+0x1f8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x15c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_DMA_IRQHandler+0x1fc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d012      	beq.n	80027ae <HAL_DMA_IRQHandler+0x156>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_DMA_IRQHandler+0x200>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x150>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_DMA_IRQHandler+0x204>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d102      	bne.n	80027a2 <HAL_DMA_IRQHandler+0x14a>
 800279c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027a0:	e00e      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a6:	e00b      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ac:	e008      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b2:	e005      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b8:	e002      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027ba:	2320      	movs	r3, #32
 80027bc:	e000      	b.n	80027c0 <HAL_DMA_IRQHandler+0x168>
 80027be:	2302      	movs	r3, #2
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_DMA_IRQHandler+0x208>)
 80027c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d034      	beq.n	800283e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027dc:	e02f      	b.n	800283e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d028      	beq.n	8002840 <HAL_DMA_IRQHandler+0x1e8>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 020e 	bic.w	r2, r2, #14
 8002806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
    }
  }
  return;
 800283e:	bf00      	nop
 8002840:	bf00      	nop
}
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40020008 	.word	0x40020008
 800284c:	4002001c 	.word	0x4002001c
 8002850:	40020030 	.word	0x40020030
 8002854:	40020044 	.word	0x40020044
 8002858:	40020058 	.word	0x40020058
 800285c:	4002006c 	.word	0x4002006c
 8002860:	40020000 	.word	0x40020000

08002864 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b10      	cmp	r3, #16
 8002890:	d108      	bne.n	80028a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a2:	e007      	b.n	80028b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	e169      	b.n	8002ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d4:	2201      	movs	r2, #1
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	f040 8158 	bne.w	8002ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a9a      	ldr	r2, [pc, #616]	; (8002b60 <HAL_GPIO_Init+0x2a0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d05e      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
 80028fc:	4a98      	ldr	r2, [pc, #608]	; (8002b60 <HAL_GPIO_Init+0x2a0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d875      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 8002902:	4a98      	ldr	r2, [pc, #608]	; (8002b64 <HAL_GPIO_Init+0x2a4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d058      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
 8002908:	4a96      	ldr	r2, [pc, #600]	; (8002b64 <HAL_GPIO_Init+0x2a4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d86f      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 800290e:	4a96      	ldr	r2, [pc, #600]	; (8002b68 <HAL_GPIO_Init+0x2a8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d052      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
 8002914:	4a94      	ldr	r2, [pc, #592]	; (8002b68 <HAL_GPIO_Init+0x2a8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d869      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 800291a:	4a94      	ldr	r2, [pc, #592]	; (8002b6c <HAL_GPIO_Init+0x2ac>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d04c      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
 8002920:	4a92      	ldr	r2, [pc, #584]	; (8002b6c <HAL_GPIO_Init+0x2ac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d863      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 8002926:	4a92      	ldr	r2, [pc, #584]	; (8002b70 <HAL_GPIO_Init+0x2b0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d046      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
 800292c:	4a90      	ldr	r2, [pc, #576]	; (8002b70 <HAL_GPIO_Init+0x2b0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d85d      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 8002932:	2b12      	cmp	r3, #18
 8002934:	d82a      	bhi.n	800298c <HAL_GPIO_Init+0xcc>
 8002936:	2b12      	cmp	r3, #18
 8002938:	d859      	bhi.n	80029ee <HAL_GPIO_Init+0x12e>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <HAL_GPIO_Init+0x80>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	080029bb 	.word	0x080029bb
 8002944:	08002995 	.word	0x08002995
 8002948:	080029a7 	.word	0x080029a7
 800294c:	080029e9 	.word	0x080029e9
 8002950:	080029ef 	.word	0x080029ef
 8002954:	080029ef 	.word	0x080029ef
 8002958:	080029ef 	.word	0x080029ef
 800295c:	080029ef 	.word	0x080029ef
 8002960:	080029ef 	.word	0x080029ef
 8002964:	080029ef 	.word	0x080029ef
 8002968:	080029ef 	.word	0x080029ef
 800296c:	080029ef 	.word	0x080029ef
 8002970:	080029ef 	.word	0x080029ef
 8002974:	080029ef 	.word	0x080029ef
 8002978:	080029ef 	.word	0x080029ef
 800297c:	080029ef 	.word	0x080029ef
 8002980:	080029ef 	.word	0x080029ef
 8002984:	0800299d 	.word	0x0800299d
 8002988:	080029b1 	.word	0x080029b1
 800298c:	4a79      	ldr	r2, [pc, #484]	; (8002b74 <HAL_GPIO_Init+0x2b4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002992:	e02c      	b.n	80029ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e029      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	3304      	adds	r3, #4
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e024      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	3308      	adds	r3, #8
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e01f      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	330c      	adds	r3, #12
 80029b6:	623b      	str	r3, [r7, #32]
          break;
 80029b8:	e01a      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029c2:	2304      	movs	r3, #4
 80029c4:	623b      	str	r3, [r7, #32]
          break;
 80029c6:	e013      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d0:	2308      	movs	r3, #8
 80029d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	611a      	str	r2, [r3, #16]
          break;
 80029da:	e009      	b.n	80029f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029dc:	2308      	movs	r3, #8
 80029de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	615a      	str	r2, [r3, #20]
          break;
 80029e6:	e003      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
          break;
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x130>
          break;
 80029ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2bff      	cmp	r3, #255	; 0xff
 80029f4:	d801      	bhi.n	80029fa <HAL_GPIO_Init+0x13a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	e001      	b.n	80029fe <HAL_GPIO_Init+0x13e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	d802      	bhi.n	8002a0c <HAL_GPIO_Init+0x14c>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x152>
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	3b08      	subs	r3, #8
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	210f      	movs	r1, #15
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	6a39      	ldr	r1, [r7, #32]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80b1 	beq.w	8002ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_GPIO_Init+0x2b8>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_GPIO_Init+0x2b8>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x2b8>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a58:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <HAL_GPIO_Init+0x2bc>)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <HAL_GPIO_Init+0x2c0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_GPIO_Init+0x1ec>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3f      	ldr	r2, [pc, #252]	; (8002b84 <HAL_GPIO_Init+0x2c4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3e      	ldr	r2, [pc, #248]	; (8002b88 <HAL_GPIO_Init+0x2c8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <HAL_GPIO_Init+0x2cc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x1e0>
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e004      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e002      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aac:	2300      	movs	r3, #0
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	f002 0203 	and.w	r2, r2, #3
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4093      	lsls	r3, r2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002abe:	492f      	ldr	r1, [pc, #188]	; (8002b7c <HAL_GPIO_Init+0x2bc>)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	492c      	ldr	r1, [pc, #176]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4928      	ldr	r1, [pc, #160]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4922      	ldr	r1, [pc, #136]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	491e      	ldr	r1, [pc, #120]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	4918      	ldr	r1, [pc, #96]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4914      	ldr	r1, [pc, #80]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d021      	beq.n	8002b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	490e      	ldr	r1, [pc, #56]	; (8002b90 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e021      	b.n	8002ba2 <HAL_GPIO_Init+0x2e2>
 8002b5e:	bf00      	nop
 8002b60:	10320000 	.word	0x10320000
 8002b64:	10310000 	.word	0x10310000
 8002b68:	10220000 	.word	0x10220000
 8002b6c:	10210000 	.word	0x10210000
 8002b70:	10120000 	.word	0x10120000
 8002b74:	10110000 	.word	0x10110000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40010800 	.word	0x40010800
 8002b84:	40010c00 	.word	0x40010c00
 8002b88:	40011000 	.word	0x40011000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_GPIO_Init+0x304>)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	4909      	ldr	r1, [pc, #36]	; (8002bc4 <HAL_GPIO_Init+0x304>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f47f ae8e 	bne.w	80028d4 <HAL_GPIO_Init+0x14>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	372c      	adds	r7, #44	; 0x2c
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40010400 	.word	0x40010400

08002bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e001      	b.n	8002bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f800 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af06      	add	r7, sp, #24
 8002c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0fd      	b.n	8002e36 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f007 f9e8 	bl	800a024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fffd 	bl	8005c60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	687e      	ldr	r6, [r7, #4]
 8002c6e:	466d      	mov	r5, sp
 8002c70:	f106 0410 	add.w	r4, r6, #16
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	1d33      	adds	r3, r6, #4
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	6838      	ldr	r0, [r7, #0]
 8002c82:	f002 ffc7 	bl	8005c14 <USB_CoreInit>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0ce      	b.n	8002e36 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 fff8 	bl	8005c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e04c      	b.n	8002d44 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3301      	adds	r3, #1
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3336      	adds	r3, #54	; 0x36
 8002ce8:	4602      	mov	r2, r0
 8002cea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3303      	adds	r3, #3
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3338      	adds	r3, #56	; 0x38
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	333c      	adds	r3, #60	; 0x3c
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	3340      	adds	r3, #64	; 0x40
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	3301      	adds	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d3ad      	bcc.n	8002caa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e044      	b.n	8002dde <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3b5      	bcc.n	8002d54 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	687e      	ldr	r6, [r7, #4]
 8002df0:	466d      	mov	r5, sp
 8002df2:	f106 0410 	add.w	r4, r6, #16
 8002df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	1d33      	adds	r3, r6, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f002 ff52 	bl	8005cac <USB_DevInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00d      	b.n	8002e36 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 fc04 	bl	800863c <USB_DevDisconnect>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_Start+0x16>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e016      	b.n	8002e82 <HAL_PCD_Start+0x44>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fee7 	bl	8005c34 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e66:	2101      	movs	r1, #1
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f007 fb32 	bl	800a4d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 fbd8 	bl	8008628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b088      	sub	sp, #32
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f005 fbda 	bl	8008650 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea6:	d102      	bne.n	8002eae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb48 	bl	800353e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f005 fbcc 	bl	8008650 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	d112      	bne.n	8002eea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f007 f91c 	bl	800a11a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f923 	bl	8003130 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fbae 	bl	8008650 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002efe:	d10b      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fb97 	bl	8008650 <USB_ReadInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2c:	d10b      	bne.n	8002f46 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f40:	b292      	uxth	r2, r2
 8002f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 fb80 	bl	8008650 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d126      	bne.n	8002faa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0208 	bic.w	r2, r2, #8
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f007 f8fd 	bl	800a18c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f005 fb4e 	bl	8008650 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	f040 8082 	bne.w	80030c6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e010      	b.n	8002fea <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	8812      	ldrh	r2, [r2, #0]
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	3320      	adds	r3, #32
 8002fde:	443b      	add	r3, r7
 8002fe0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d9eb      	bls.n	8002fc8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003010:	b29a      	uxth	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	b292      	uxth	r2, r2
 800301c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003020:	bf00      	nop
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302a:	b29b      	uxth	r3, r3
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f6      	beq.n	8003022 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800303c:	b29a      	uxth	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	b292      	uxth	r2, r2
 8003048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e00f      	b.n	8003072 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	4611      	mov	r1, r2
 800305a:	7ffa      	ldrb	r2, [r7, #31]
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	440a      	add	r2, r1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	3320      	adds	r3, #32
 8003064:	443b      	add	r3, r7
 8003066:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800306a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	3301      	adds	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d9ec      	bls.n	8003052 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	b292      	uxth	r2, r2
 800308c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a2:	b292      	uxth	r2, r2
 80030a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0204 	orr.w	r2, r2, #4
 80030ba:	b292      	uxth	r2, r2
 80030bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f007 f849 	bl	800a158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f005 fac0 	bl	8008650 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030da:	d10e      	bne.n	80030fa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ee:	b292      	uxth	r2, r2
 80030f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f007 f802 	bl	800a0fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 faa6 	bl	8008650 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d10b      	bne.n	8003128 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003122:	b292      	uxth	r2, r2
 8003124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_SetAddress+0x1a>
 8003146:	2302      	movs	r3, #2
 8003148:	e013      	b.n	8003172 <HAL_PCD_SetAddress+0x42>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f005 fa4d 	bl	8008602 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	461a      	mov	r2, r3
 8003188:	4603      	mov	r3, r0
 800318a:	70fb      	strb	r3, [r7, #3]
 800318c:	460b      	mov	r3, r1
 800318e:	803b      	strh	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	da0e      	bge.n	80031be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 0207 	and.w	r2, r3, #7
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031e8:	883a      	ldrh	r2, [r7, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	78ba      	ldrb	r2, [r7, #2]
 80031f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003206:	78bb      	ldrb	r3, [r7, #2]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d102      	bne.n	8003212 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_PCD_EP_Open+0xa6>
 800321c:	2302      	movs	r3, #2
 800321e:	e00e      	b.n	800323e <HAL_PCD_EP_Open+0xc4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	f002 fd5c 	bl	8005cec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800323c:	7afb      	ldrb	r3, [r7, #11]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003256:	2b00      	cmp	r3, #0
 8003258:	da0e      	bge.n	8003278 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
 8003276:	e00e      	b.n	8003296 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 0207 	and.w	r2, r3, #7
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_PCD_EP_Close+0x6a>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e00e      	b.n	80032ce <HAL_PCD_EP_Close+0x88>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 f87e 	bl	80063c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	460b      	mov	r3, r1
 80032e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	7afb      	ldrb	r3, [r7, #11]
 80032e8:	f003 0207 	and.w	r2, r3, #7
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003316:	7afb      	ldrb	r3, [r7, #11]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b2da      	uxtb	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6979      	ldr	r1, [r7, #20]
 8003332:	4618      	mov	r0, r3
 8003334:	f003 fa30 	bl	8006798 <USB_EPStartXfer>
 8003338:	e005      	b.n	8003346 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fa29 	bl	8006798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	460b      	mov	r3, r1
 800335e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2201      	movs	r2, #1
 800339a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 f9ed 	bl	8006798 <USB_EPStartXfer>
 80033be:	e005      	b.n	80033cc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 f9e6 	bl	8006798 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 0207 	and.w	r2, r3, #7
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d901      	bls.n	80033f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04c      	b.n	800348e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da0e      	bge.n	800341a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	705a      	strb	r2, [r3, #1]
 8003418:	e00c      	b.n	8003434 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_SetStall+0x7e>
 8003450:	2302      	movs	r3, #2
 8003452:	e01c      	b.n	800348e <HAL_PCD_EP_SetStall+0xb8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 ffd0 	bl	8008408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f005 f8f5 	bl	800866e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d901      	bls.n	80034b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e040      	b.n	8003536 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da0e      	bge.n	80034da <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	705a      	strb	r2, [r3, #1]
 80034d8:	e00e      	b.n	80034f8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 0207 	and.w	r2, r3, #7
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_EP_ClrStall+0x82>
 8003514:	2302      	movs	r3, #2
 8003516:	e00e      	b.n	8003536 <HAL_PCD_EP_ClrStall+0xa0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	f004 ffbe 	bl	80084a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08e      	sub	sp, #56	; 0x38
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003546:	e2ec      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003550:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800355e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8161 	bne.w	800382a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003568:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d152      	bne.n	8003618 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	81fb      	strh	r3, [r7, #14]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	89fb      	ldrh	r3, [r7, #14]
 800358a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003592:	b29b      	uxth	r3, r3
 8003594:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3328      	adds	r3, #40	; 0x28
 800359a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	3302      	adds	r3, #2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	441a      	add	r2, r3
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035d6:	2100      	movs	r1, #0
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f006 fd76 	bl	800a0ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 829b 	beq.w	8003b22 <PCD_EP_ISR_Handler+0x5e4>
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 8296 	bne.w	8003b22 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003602:	b2da      	uxtb	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b292      	uxth	r2, r2
 800360a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003616:	e284      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800362a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362e:	2b00      	cmp	r3, #0
 8003630:	d034      	beq.n	800369c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	3306      	adds	r3, #6
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003670:	b29b      	uxth	r3, r3
 8003672:	f005 f84c 	bl	800870e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003682:	4013      	ands	r3, r2
 8003684:	823b      	strh	r3, [r7, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	8a3a      	ldrh	r2, [r7, #16]
 800368c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003690:	b292      	uxth	r2, r2
 8003692:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f006 fceb 	bl	800a070 <HAL_PCD_SetupStageCallback>
 800369a:	e242      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800369c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f280 823e 	bge.w	8003b22 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036b2:	4013      	ands	r3, r2
 80036b4:	83bb      	strh	r3, [r7, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	8bba      	ldrh	r2, [r7, #28]
 80036bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036c0:	b292      	uxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	3306      	adds	r3, #6
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d019      	beq.n	800372c <PCD_EP_ISR_Handler+0x1ee>
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	6959      	ldr	r1, [r3, #20]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003710:	b29b      	uxth	r3, r3
 8003712:	f004 fffc 	bl	800870e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	441a      	add	r2, r3
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003724:	2100      	movs	r1, #0
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f006 fcb4 	bl	800a094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 81f2 	bne.w	8003b22 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d112      	bne.n	800378c <PCD_EP_ISR_Handler+0x24e>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003770:	b29a      	uxth	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003784:	b29a      	uxth	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e02f      	b.n	80037ec <PCD_EP_ISR_Handler+0x2ae>
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b3e      	cmp	r3, #62	; 0x3e
 8003792:	d813      	bhi.n	80037bc <PCD_EP_ISR_Handler+0x27e>
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <PCD_EP_ISR_Handler+0x270>
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	3301      	adds	r3, #1
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	029b      	lsls	r3, r3, #10
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e017      	b.n	80037ec <PCD_EP_ISR_Handler+0x2ae>
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <PCD_EP_ISR_Handler+0x298>
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3b01      	subs	r3, #1
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	b29b      	uxth	r3, r3
 80037da:	029b      	lsls	r3, r3, #10
 80037dc:	b29b      	uxth	r3, r3
 80037de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	827b      	strh	r3, [r7, #18]
 80037fe:	8a7b      	ldrh	r3, [r7, #18]
 8003800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003804:	827b      	strh	r3, [r7, #18]
 8003806:	8a7b      	ldrh	r3, [r7, #18]
 8003808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800380c:	827b      	strh	r3, [r7, #18]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	8a7b      	ldrh	r3, [r7, #18]
 8003814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
 8003828:	e17b      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800383c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003840:	2b00      	cmp	r3, #0
 8003842:	f280 80ea 	bge.w	8003a1a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29a      	uxth	r2, r3
 8003858:	f640 738f 	movw	r3, #3983	; 0xf8f
 800385c:	4013      	ands	r3, r2
 800385e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003874:	b292      	uxth	r2, r2
 8003876:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003878:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	7b1b      	ldrb	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d122      	bne.n	80038dc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	3306      	adds	r3, #6
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80038c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8087 	beq.w	80039d6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	6959      	ldr	r1, [r3, #20]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	88da      	ldrh	r2, [r3, #6]
 80038d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d6:	f004 ff1a 	bl	800870e <USB_ReadPMA>
 80038da:	e07c      	b.n	80039d6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	78db      	ldrb	r3, [r3, #3]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d108      	bne.n	80038f6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038e6:	461a      	mov	r2, r3
 80038e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f927 	bl	8003b3e <HAL_PCD_EP_DB_Receive>
 80038f0:	4603      	mov	r3, r0
 80038f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038f4:	e06f      	b.n	80039d6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003910:	847b      	strh	r3, [r7, #34]	; 0x22
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	3302      	adds	r3, #2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003978:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800397a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02a      	beq.n	80039d6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	6959      	ldr	r1, [r3, #20]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	891a      	ldrh	r2, [r3, #8]
 800398c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800398e:	f004 febe 	bl	800870e <USB_ReadPMA>
 8003992:	e020      	b.n	80039d6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	3306      	adds	r3, #6
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	6959      	ldr	r1, [r3, #20]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	895a      	ldrh	r2, [r3, #10]
 80039d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039d2:	f004 fe9c 	bl	800870e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039dc:	441a      	add	r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039e8:	441a      	add	r2, r3
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <PCD_EP_ISR_Handler+0x4c2>
 80039f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d206      	bcs.n	8003a0e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f006 fb44 	bl	800a094 <HAL_PCD_DataOutStageCallback>
 8003a0c:	e005      	b.n	8003a1a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 febf 	bl	8006798 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d07e      	beq.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	843b      	strh	r3, [r7, #32]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	8c3b      	ldrh	r3, [r7, #32]
 8003a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	78db      	ldrb	r3, [r3, #3]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d00c      	beq.n	8003a92 <PCD_EP_ISR_Handler+0x554>
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d146      	bne.n	8003b16 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d141      	bne.n	8003b16 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	699a      	ldr	r2, [r3, #24]
 8003ac0:	8bfb      	ldrh	r3, [r7, #30]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d906      	bls.n	8003ad4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	8bfb      	ldrh	r3, [r7, #30]
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e002      	b.n	8003ada <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f006 faee 	bl	800a0ca <HAL_PCD_DataInStageCallback>
 8003aee:	e018      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	8bfb      	ldrh	r3, [r7, #30]
 8003af6:	441a      	add	r2, r3
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	8bfb      	ldrh	r3, [r7, #30]
 8003b02:	441a      	add	r2, r3
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 fe42 	bl	8006798 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003b14:	e005      	b.n	8003b22 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f91b 	bl	8003d58 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f6ff ad0a 	blt.w	8003548 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3738      	adds	r7, #56	; 0x38
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b088      	sub	sp, #32
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07e      	beq.n	8003c54 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	8b7b      	ldrh	r3, [r7, #26]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d306      	bcc.n	8003b98 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	619a      	str	r2, [r3, #24]
 8003b96:	e002      	b.n	8003b9e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d123      	bne.n	8003bee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc0:	833b      	strh	r3, [r7, #24]
 8003bc2:	8b3b      	ldrh	r3, [r7, #24]
 8003bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bc8:	833b      	strh	r3, [r7, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8b3b      	ldrh	r3, [r7, #24]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01f      	beq.n	8003c38 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	82fb      	strh	r3, [r7, #22]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	8afb      	ldrh	r3, [r7, #22]
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8087 	beq.w	8003d4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	891a      	ldrh	r2, [r3, #8]
 8003c4c:	8b7b      	ldrh	r3, [r7, #26]
 8003c4e:	f004 fd5e 	bl	800870e <USB_ReadPMA>
 8003c52:	e07c      	b.n	8003d4e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	3306      	adds	r3, #6
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	8b7b      	ldrh	r3, [r7, #26]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d306      	bcc.n	8003c96 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	8b7b      	ldrh	r3, [r7, #26]
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	619a      	str	r2, [r3, #24]
 8003c94:	e002      	b.n	8003c9c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d123      	bne.n	8003cec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	83fb      	strh	r3, [r7, #30]
 8003cc0:	8bfb      	ldrh	r3, [r7, #30]
 8003cc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cc6:	83fb      	strh	r3, [r7, #30]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	8bfb      	ldrh	r3, [r7, #30]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11f      	bne.n	8003d36 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	83bb      	strh	r3, [r7, #28]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	441a      	add	r2, r3
 8003d20:	8bbb      	ldrh	r3, [r7, #28]
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d36:	8b7b      	ldrh	r3, [r7, #26]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6959      	ldr	r1, [r3, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	895a      	ldrh	r2, [r3, #10]
 8003d48:	8b7b      	ldrh	r3, [r7, #26]
 8003d4a:	f004 fce0 	bl	800870e <USB_ReadPMA>
    }
  }

  return count;
 8003d4e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0a2      	sub	sp, #136	; 0x88
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 81c7 	beq.w	8004100 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	3302      	adds	r3, #2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d907      	bls.n	8003dba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003db2:	1ad2      	subs	r2, r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	619a      	str	r2, [r3, #24]
 8003db8:	e002      	b.n	8003dc0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 80b9 	bne.w	8003f3c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d126      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	4413      	add	r3, r2
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	011a      	lsls	r2, r3, #4
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	4413      	add	r3, r2
 8003df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	e01a      	b.n	8003e56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d116      	bne.n	8003e56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	4413      	add	r3, r2
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	011a      	lsls	r2, r3, #4
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2200      	movs	r2, #0
 8003e54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d126      	bne.n	8003eb2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e017      	b.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d113      	bne.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	4413      	add	r3, r2
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f006 f8ee 	bl	800a0ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 82d4 	beq.w	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	827b      	strh	r3, [r7, #18]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	8a7b      	ldrh	r3, [r7, #18]
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
 8003f3a:	e2b2      	b.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d021      	beq.n	8003f8a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 8286 	bne.w	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fac:	441a      	add	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d309      	bcc.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	621a      	str	r2, [r3, #32]
 8003fd0:	e015      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d107      	bne.n	8003fea <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003fda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fde:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fe8:	e009      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d155      	bne.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	63bb      	str	r3, [r7, #56]	; 0x38
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	4413      	add	r3, r2
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	011a      	lsls	r2, r3, #4
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	4413      	add	r3, r2
 8004028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	2b00      	cmp	r3, #0
 8004032:	d112      	bne.n	800405a <HAL_PCD_EP_DB_Transmit+0x302>
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800403e:	b29a      	uxth	r2, r3
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004052:	b29a      	uxth	r2, r3
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e047      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x392>
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	2b3e      	cmp	r3, #62	; 0x3e
 800405e:	d811      	bhi.n	8004084 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
 8004066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	3301      	adds	r3, #1
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	b29b      	uxth	r3, r3
 800407a:	029b      	lsls	r3, r3, #10
 800407c:	b29a      	uxth	r2, r3
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e032      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x392>
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
 800408a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_PCD_EP_DB_Transmit+0x342>
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	3b01      	subs	r3, #1
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
 800409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409c:	b29b      	uxth	r3, r3
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e01b      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x392>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d117      	bne.n	80040ea <HAL_PCD_EP_DB_Transmit+0x392>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	643b      	str	r3, [r7, #64]	; 0x40
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ce:	4413      	add	r3, r2
 80040d0:	643b      	str	r3, [r7, #64]	; 0x40
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	011a      	lsls	r2, r3, #4
 80040d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040da:	4413      	add	r3, r2
 80040dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6959      	ldr	r1, [r3, #20]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	891a      	ldrh	r2, [r3, #8]
 80040f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f004 fac3 	bl	8008684 <USB_WritePMA>
 80040fe:	e1d0      	b.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	3306      	adds	r3, #6
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004134:	429a      	cmp	r2, r3
 8004136:	d307      	bcc.n	8004148 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004140:	1ad2      	subs	r2, r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	619a      	str	r2, [r3, #24]
 8004146:	e002      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80c4 	bne.w	80042e0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d126      	bne.n	80041ae <HAL_PCD_EP_DB_Transmit+0x456>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	4413      	add	r3, r2
 8004176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	011a      	lsls	r2, r3, #4
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	4413      	add	r3, r2
 8004182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004186:	66bb      	str	r3, [r7, #104]	; 0x68
 8004188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004192:	b29a      	uxth	r2, r3
 8004194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	e01a      	b.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d116      	bne.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	677b      	str	r3, [r7, #116]	; 0x74
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ca:	4413      	add	r3, r2
 80041cc:	677b      	str	r3, [r7, #116]	; 0x74
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	011a      	lsls	r2, r3, #4
 80041d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d6:	4413      	add	r3, r2
 80041d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041dc:	673b      	str	r3, [r7, #112]	; 0x70
 80041de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e0:	2200      	movs	r2, #0
 80041e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d12f      	bne.n	8004252 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800420a:	4413      	add	r3, r2
 800420c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	011a      	lsls	r2, r3, #4
 8004216:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800421a:	4413      	add	r3, r2
 800421c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004230:	b29a      	uxth	r2, r3
 8004232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004248:	b29a      	uxth	r2, r3
 800424a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e017      	b.n	8004282 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d113      	bne.n	8004282 <HAL_PCD_EP_DB_Transmit+0x52a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004268:	4413      	add	r3, r2
 800426a:	67bb      	str	r3, [r7, #120]	; 0x78
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004274:	4413      	add	r3, r2
 8004276:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800427a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800427c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800427e:	2200      	movs	r2, #0
 8004280:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	4619      	mov	r1, r3
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f005 ff1e 	bl	800a0ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 8104 	bne.w	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	b29b      	uxth	r3, r3
 80042dc:	8013      	strh	r3, [r2, #0]
 80042de:	e0e0      	b.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d121      	bne.n	800432e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800431a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 80b4 	bne.w	80044a2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004342:	441a      	add	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004350:	441a      	add	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d309      	bcc.n	8004376 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	621a      	str	r2, [r3, #32]
 8004374:	e015      	b.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d107      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800437e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004382:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800438c:	e009      	b.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	667b      	str	r3, [r7, #100]	; 0x64
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d155      	bne.n	800445c <HAL_PCD_EP_DB_Transmit+0x704>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c4:	4413      	add	r3, r2
 80043c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	011a      	lsls	r2, r3, #4
 80043ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d0:	4413      	add	r3, r2
 80043d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d112      	bne.n	8004404 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80043de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e044      	b.n	800448e <HAL_PCD_EP_DB_Transmit+0x736>
 8004404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004406:	2b3e      	cmp	r3, #62	; 0x3e
 8004408:	d811      	bhi.n	800442e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	657b      	str	r3, [r7, #84]	; 0x54
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	3301      	adds	r3, #1
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004422:	b29b      	uxth	r3, r3
 8004424:	029b      	lsls	r3, r3, #10
 8004426:	b29a      	uxth	r2, r3
 8004428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e02f      	b.n	800448e <HAL_PCD_EP_DB_Transmit+0x736>
 800442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	657b      	str	r3, [r7, #84]	; 0x54
 8004434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	3b01      	subs	r3, #1
 8004442:	657b      	str	r3, [r7, #84]	; 0x54
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	b29b      	uxth	r3, r3
 8004448:	029b      	lsls	r3, r3, #10
 800444a:	b29b      	uxth	r3, r3
 800444c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004454:	b29a      	uxth	r2, r3
 8004456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	e018      	b.n	800448e <HAL_PCD_EP_DB_Transmit+0x736>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d114      	bne.n	800448e <HAL_PCD_EP_DB_Transmit+0x736>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004472:	4413      	add	r3, r2
 8004474:	667b      	str	r3, [r7, #100]	; 0x64
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	011a      	lsls	r2, r3, #4
 800447c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800447e:	4413      	add	r3, r2
 8004480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004484:	663b      	str	r3, [r7, #96]	; 0x60
 8004486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004488:	b29a      	uxth	r2, r3
 800448a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800448c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6959      	ldr	r1, [r3, #20]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	895a      	ldrh	r2, [r3, #10]
 800449a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	f004 f8f1 	bl	8008684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044bc:	823b      	strh	r3, [r7, #16]
 80044be:	8a3b      	ldrh	r3, [r7, #16]
 80044c0:	f083 0310 	eor.w	r3, r3, #16
 80044c4:	823b      	strh	r3, [r7, #16]
 80044c6:	8a3b      	ldrh	r3, [r7, #16]
 80044c8:	f083 0320 	eor.w	r3, r3, #32
 80044cc:	823b      	strh	r3, [r7, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	8a3b      	ldrh	r3, [r7, #16]
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3788      	adds	r7, #136	; 0x88
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	4613      	mov	r3, r2
 800450c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e009      	b.n	8004546 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004532:	897a      	ldrh	r2, [r7, #10]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004546:	893b      	ldrh	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	b29a      	uxth	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	80da      	strh	r2, [r3, #6]
 800455a:	e00b      	b.n	8004574 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2201      	movs	r2, #1
 8004560:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	b29a      	uxth	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	b29a      	uxth	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e272      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8087 	beq.w	80046ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a0:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d00c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045ac:	4b8f      	ldr	r3, [pc, #572]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d112      	bne.n	80045de <HAL_RCC_OscConfig+0x5e>
 80045b8:	4b8c      	ldr	r3, [pc, #560]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d10b      	bne.n	80045de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c6:	4b89      	ldr	r3, [pc, #548]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d06c      	beq.n	80046ac <HAL_RCC_OscConfig+0x12c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d168      	bne.n	80046ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e24c      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x76>
 80045e8:	4b80      	ldr	r3, [pc, #512]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e02e      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x98>
 80045fe:	4b7b      	ldr	r3, [pc, #492]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b78      	ldr	r3, [pc, #480]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a77      	ldr	r2, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0xbc>
 8004622:	4b72      	ldr	r3, [pc, #456]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a71      	ldr	r2, [pc, #452]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 800463c:	4b6b      	ldr	r3, [pc, #428]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6a      	ldr	r2, [pc, #424]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fd f83c 	bl	80016d8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd f838 	bl	80016d8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e200      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xe4>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd f828 	bl	80016d8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd f824 	bl	80016d8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1ec      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x10c>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d063      	beq.n	8004782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ba:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11c      	bne.n	800470c <HAL_RCC_OscConfig+0x18c>
 80046d2:	4b46      	ldr	r3, [pc, #280]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCC_OscConfig+0x176>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1c0      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4939      	ldr	r1, [pc, #228]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	e03a      	b.n	8004782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d020      	beq.n	8004756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x270>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fc ffdd 	bl	80016d8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fc ffd9 	bl	80016d8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1a1      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4927      	ldr	r1, [pc, #156]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
 8004754:	e015      	b.n	8004782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_RCC_OscConfig+0x270>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fc ffbc 	bl	80016d8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004764:	f7fc ffb8 	bl	80016d8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e180      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d03a      	beq.n	8004804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d019      	beq.n	80047ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCC_OscConfig+0x274>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479c:	f7fc ff9c 	bl	80016d8 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a4:	f7fc ff98 	bl	80016d8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e160      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047c2:	2001      	movs	r0, #1
 80047c4:	f000 fac4 	bl	8004d50 <RCC_Delay>
 80047c8:	e01c      	b.n	8004804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x274>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d0:	f7fc ff82 	bl	80016d8 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d6:	e00f      	b.n	80047f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fc ff7e 	bl	80016d8 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d908      	bls.n	80047f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e146      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	42420000 	.word	0x42420000
 80047f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e9      	bne.n	80047d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a6 	beq.w	800495e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004816:	4b8b      	ldr	r3, [pc, #556]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4a87      	ldr	r2, [pc, #540]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	61d3      	str	r3, [r2, #28]
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d118      	bne.n	800487c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484a:	4b7f      	ldr	r3, [pc, #508]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7e      	ldr	r2, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fc ff3f 	bl	80016d8 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485e:	f7fc ff3b 	bl	80016d8 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e103      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	4b75      	ldr	r3, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x312>
 8004884:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4a6e      	ldr	r2, [pc, #440]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6213      	str	r3, [r2, #32]
 8004890:	e02d      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x334>
 800489a:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4a69      	ldr	r2, [pc, #420]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6213      	str	r3, [r2, #32]
 80048a6:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a66      	ldr	r2, [pc, #408]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	e01c      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCC_OscConfig+0x356>
 80048bc:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4a60      	ldr	r2, [pc, #384]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4a5d      	ldr	r2, [pc, #372]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	e00b      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4a5a      	ldr	r2, [pc, #360]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	6213      	str	r3, [r2, #32]
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d015      	beq.n	8004922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fc feef 	bl	80016d8 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fc feeb 	bl	80016d8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0b1      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ee      	beq.n	80048fe <HAL_RCC_OscConfig+0x37e>
 8004920:	e014      	b.n	800494c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fc fed9 	bl	80016d8 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fc fed5 	bl	80016d8 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e09b      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ee      	bne.n	800492a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8087 	beq.w	8004a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b08      	cmp	r3, #8
 8004972:	d061      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d146      	bne.n	8004a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fc fea9 	bl	80016d8 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498a:	f7fc fea5 	bl	80016d8 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e06d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d108      	bne.n	80049c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4921      	ldr	r1, [pc, #132]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a19      	ldr	r1, [r3, #32]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	430b      	orrs	r3, r1
 80049d6:	491b      	ldr	r1, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fc fe79 	bl	80016d8 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fc fe75 	bl	80016d8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e03d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x46a>
 8004a08:	e035      	b.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fe62 	bl	80016d8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fc fe5e 	bl	80016d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e026      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x498>
 8004a36:	e01e      	b.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e019      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x500>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0d0      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a98:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d910      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0207 	bic.w	r2, r3, #7
 8004aae:	4965      	ldr	r1, [pc, #404]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0b8      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a58      	ldr	r2, [pc, #352]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af8:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b04:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	494d      	ldr	r1, [pc, #308]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d040      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d115      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07f      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e073      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06b      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4936      	ldr	r1, [pc, #216]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b74:	f7fc fdb0 	bl	80016d8 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fc fdac 	bl	80016d8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e053      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 020c 	and.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d1eb      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d210      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	4922      	ldr	r1, [pc, #136]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e032      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4916      	ldr	r1, [pc, #88]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	490e      	ldr	r1, [pc, #56]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c12:	f000 f821 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <HAL_RCC_ClockConfig+0x1cc>)
 8004c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_ClockConfig+0x1d0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fc fd0e 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	0800a610 	.word	0x0800a610
 8004c50:	20000004 	.word	0x20000004
 8004c54:	20000008 	.word	0x20000008

08004c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b490      	push	{r4, r7}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c5e:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c60:	1d3c      	adds	r4, r7, #4
 8004c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c68:	f240 2301 	movw	r3, #513	; 0x201
 8004c6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d002      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x40>
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0x46>
 8004c96:	e02b      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c98:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c9a:	623b      	str	r3, [r7, #32]
      break;
 8004c9c:	e02b      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	0c9b      	lsrs	r3, r3, #18
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3328      	adds	r3, #40	; 0x28
 8004ca8:	443b      	add	r3, r7
 8004caa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d012      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	0c5b      	lsrs	r3, r3, #17
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	3328      	adds	r3, #40	; 0x28
 8004cc6:	443b      	add	r3, r7
 8004cc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ccc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cd2:	fb03 f202 	mul.w	r2, r3, r2
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	e004      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	623b      	str	r3, [r7, #32]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cf2:	623b      	str	r3, [r7, #32]
      break;
 8004cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3728      	adds	r7, #40	; 0x28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc90      	pop	{r4, r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	0800a5b0 	.word	0x0800a5b0
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	007a1200 	.word	0x007a1200
 8004d10:	003d0900 	.word	0x003d0900

08004d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d18:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20000004 	.word	0x20000004

08004d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d2c:	f7ff fff2 	bl	8004d14 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	0adb      	lsrs	r3, r3, #11
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4903      	ldr	r1, [pc, #12]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800a620 	.word	0x0800a620

08004d50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <RCC_Delay+0x34>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <RCC_Delay+0x38>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	0a5b      	lsrs	r3, r3, #9
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d6c:	bf00      	nop
  }
  while (Delay --);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	60fa      	str	r2, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f9      	bne.n	8004d6c <RCC_Delay+0x1c>
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	20000004 	.word	0x20000004
 8004d88:	10624dd3 	.word	0x10624dd3

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d07d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004da8:	2300      	movs	r3, #0
 8004daa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	4a4b      	ldr	r2, [pc, #300]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	61d3      	str	r3, [r2, #28]
 8004dc4:	4b49      	ldr	r3, [pc, #292]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd4:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d118      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de0:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a42      	ldr	r2, [pc, #264]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dec:	f7fc fc74 	bl	80016d8 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	e008      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fc fc70 	bl	80016d8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e06d      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e06:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e12:	4b36      	ldr	r3, [pc, #216]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02e      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d027      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e30:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e40:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e46:	4a29      	ldr	r2, [pc, #164]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d014      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fc fc3f 	bl	80016d8 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fc fc3b 	bl	80016d8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e036      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ee      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4917      	ldr	r1, [pc, #92]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e98:	4b14      	ldr	r3, [pc, #80]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	490b      	ldr	r1, [pc, #44]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4904      	ldr	r1, [pc, #16]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	42420440 	.word	0x42420440

08004ef8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b08d      	sub	sp, #52	; 0x34
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f00:	4b58      	ldr	r3, [pc, #352]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004f02:	f107 040c 	add.w	r4, r7, #12
 8004f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f0c:	f240 2301 	movw	r3, #513	; 0x201
 8004f10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	2300      	movs	r3, #0
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	f200 808e 	bhi.w	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d049      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d079      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f40:	e086      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f48:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d07f      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	0c9b      	lsrs	r3, r3, #18
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	3330      	adds	r3, #48	; 0x30
 8004f5e:	443b      	add	r3, r7
 8004f60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f64:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d017      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f70:	4b3d      	ldr	r3, [pc, #244]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c5b      	lsrs	r3, r3, #17
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	3330      	adds	r3, #48	; 0x30
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f8e:	4a37      	ldr	r2, [pc, #220]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9e:	e004      	b.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	4a33      	ldr	r2, [pc, #204]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fbc:	e04a      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fcc:	e042      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004fce:	4b26      	ldr	r3, [pc, #152]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fde:	d108      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff0:	e01f      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d109      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800500a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005010:	e00f      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501c:	d11c      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800502a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005030:	e012      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005032:	e011      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005034:	f7ff fe78 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	0b9b      	lsrs	r3, r3, #14
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	3301      	adds	r3, #1
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800504e:	e004      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005058:	bf00      	nop
    }
  }
  return (frequency);
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800505c:	4618      	mov	r0, r3
 800505e:	3734      	adds	r7, #52	; 0x34
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	0800a5c0 	.word	0x0800a5c0
 8005068:	40021000 	.word	0x40021000
 800506c:	007a1200 	.word	0x007a1200
 8005070:	003d0900 	.word	0x003d0900
 8005074:	aaaaaaab 	.word	0xaaaaaaab

08005078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e041      	b.n	800510e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc f9c0 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 faaa 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e041      	b.n	80051ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f839 	bl	80051b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 fa5b 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x24>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e022      	b.n	8005232 <HAL_TIM_PWM_Start+0x6a>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d109      	bne.n	8005206 <HAL_TIM_PWM_Start+0x3e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e015      	b.n	8005232 <HAL_TIM_PWM_Start+0x6a>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x58>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e008      	b.n	8005232 <HAL_TIM_PWM_Start+0x6a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e05e      	b.n	80052f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_TIM_PWM_Start+0x82>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005248:	e013      	b.n	8005272 <HAL_TIM_PWM_Start+0xaa>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Start+0x92>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005258:	e00b      	b.n	8005272 <HAL_TIM_PWM_Start+0xaa>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005268:	e003      	b.n	8005272 <HAL_TIM_PWM_Start+0xaa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc48 	bl	8005b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_TIM_PWM_Start+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d107      	bne.n	800529a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_TIM_PWM_Start+0x138>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIM_PWM_Start+0xfa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d009      	beq.n	80052c2 <HAL_TIM_PWM_Start+0xfa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a14      	ldr	r2, [pc, #80]	; (8005304 <HAL_TIM_PWM_Start+0x13c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_PWM_Start+0xfa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_TIM_PWM_Start+0x140>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d010      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	e007      	b.n	80052f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ac      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	f200 809f 	bhi.w	8005474 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005371 	.word	0x08005371
 8005340:	08005475 	.word	0x08005475
 8005344:	08005475 	.word	0x08005475
 8005348:	08005475 	.word	0x08005475
 800534c:	080053b1 	.word	0x080053b1
 8005350:	08005475 	.word	0x08005475
 8005354:	08005475 	.word	0x08005475
 8005358:	08005475 	.word	0x08005475
 800535c:	080053f3 	.word	0x080053f3
 8005360:	08005475 	.word	0x08005475
 8005364:	08005475 	.word	0x08005475
 8005368:	08005475 	.word	0x08005475
 800536c:	08005433 	.word	0x08005433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f9ac 	bl	80056d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0208 	orr.w	r2, r2, #8
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0204 	bic.w	r2, r2, #4
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	619a      	str	r2, [r3, #24]
      break;
 80053ae:	e062      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f9f2 	bl	80057a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]
      break;
 80053f0:	e041      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fa3b 	bl	8005874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0208 	orr.w	r2, r2, #8
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0204 	bic.w	r2, r2, #4
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	61da      	str	r2, [r3, #28]
      break;
 8005430:	e021      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fa85 	bl	8005948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	021a      	lsls	r2, r3, #8
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	61da      	str	r2, [r3, #28]
      break;
 8005472:	e000      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e0b3      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x180>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d03e      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xd0>
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	f200 8087 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	f000 8085 	beq.w	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d87f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d01a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xa2>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d87b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d050      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x116>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d877      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d03c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0xf6>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d873      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d058      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x136>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d86f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d064      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d86b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d060      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d867      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 8005524:	2b10      	cmp	r3, #16
 8005526:	d05a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005528:	e062      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f000 faca 	bl	8005ad2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800554c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e04e      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f000 fab3 	bl	8005ad2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
      break;
 800557c:	e03b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 fa2a 	bl	80059e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fa81 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 800559c:	e02b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 fa48 	bl	8005a40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa71 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 80055bc:	e01b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 fa0a 	bl	80059e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fa61 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 fa58 	bl	8005a9e <TIM_ITRx_SetConfig>
        break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a29      	ldr	r2, [pc, #164]	; (80056c8 <TIM_Base_SetConfig+0xb8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00b      	beq.n	8005640 <TIM_Base_SetConfig+0x30>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d007      	beq.n	8005640 <TIM_Base_SetConfig+0x30>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a26      	ldr	r2, [pc, #152]	; (80056cc <TIM_Base_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0x30>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <TIM_Base_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <TIM_Base_SetConfig+0xb8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_Base_SetConfig+0x62>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005660:	d007      	beq.n	8005672 <TIM_Base_SetConfig+0x62>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <TIM_Base_SetConfig+0xbc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_Base_SetConfig+0x62>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <TIM_Base_SetConfig+0xc0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d108      	bne.n	8005684 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a07      	ldr	r2, [pc, #28]	; (80056c8 <TIM_Base_SetConfig+0xb8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800

080056d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a1c      	ldr	r2, [pc, #112]	; (800579c <TIM_OC1_SetConfig+0xc8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10c      	bne.n	800574a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0308 	bic.w	r3, r3, #8
 8005736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <TIM_OC1_SetConfig+0xc8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	621a      	str	r2, [r3, #32]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00

080057a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0210 	bic.w	r2, r3, #16
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0320 	bic.w	r3, r3, #32
 80057ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <TIM_OC2_SetConfig+0xd0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10d      	bne.n	800581c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a14      	ldr	r2, [pc, #80]	; (8005870 <TIM_OC2_SetConfig+0xd0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d113      	bne.n	800584c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00

08005874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <TIM_OC3_SetConfig+0xd0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10d      	bne.n	80058ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <TIM_OC3_SetConfig+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d113      	bne.n	800591e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00

08005948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	031b      	lsls	r3, r3, #12
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <TIM_OC4_SetConfig+0x98>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d109      	bne.n	80059bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00

080059e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 030a 	bic.w	r3, r3, #10
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	031b      	lsls	r3, r3, #12
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f043 0307 	orr.w	r3, r3, #7
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	021a      	lsls	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	609a      	str	r2, [r3, #8]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2201      	movs	r2, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e046      	b.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10c      	bne.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800

08005c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 0014 	add.w	r0, r7, #20
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr

08005c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4013      	ands	r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cac:	b084      	sub	sp, #16
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	f107 0014 	add.w	r0, r7, #20
 8005cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	b004      	add	sp, #16
 8005cea:	4770      	bx	lr

08005cec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b09b      	sub	sp, #108	; 0x6c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d81f      	bhi.n	8005d5e <USB_ActivateEndpoint+0x72>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <USB_ActivateEndpoint+0x38>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d67 	.word	0x08005d67
 8005d30:	08005d43 	.word	0x08005d43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005d34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d40:	e012      	b.n	8005d68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005d42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005d4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d4e:	e00b      	b.n	8005d68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d5c:	e004      	b.n	8005d68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005d64:	e000      	b.n	8005d68 <USB_ActivateEndpoint+0x7c>
      break;
 8005d66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	7b1b      	ldrb	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 8149 	bne.w	800606c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8084 	beq.w	8005eec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	011a      	lsls	r2, r3, #4
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	88db      	ldrh	r3, [r3, #6]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	81fb      	strh	r3, [r7, #14]
 8005e26:	89fb      	ldrh	r3, [r7, #14]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <USB_ActivateEndpoint+0x17c>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	81bb      	strh	r3, [r7, #12]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	89bb      	ldrh	r3, [r7, #12]
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d020      	beq.n	8005eb2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e86:	813b      	strh	r3, [r7, #8]
 8005e88:	893b      	ldrh	r3, [r7, #8]
 8005e8a:	f083 0320 	eor.w	r3, r3, #32
 8005e8e:	813b      	strh	r3, [r7, #8]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	893b      	ldrh	r3, [r7, #8]
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]
 8005eb0:	e27f      	b.n	80063b2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec8:	817b      	strh	r3, [r7, #10]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	897b      	ldrh	r3, [r7, #10]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
 8005eea:	e262      	b.n	80063b2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	4413      	add	r3, r2
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	011a      	lsls	r2, r3, #4
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	88db      	ldrh	r3, [r3, #6]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	4413      	add	r3, r2
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	011a      	lsls	r2, r3, #4
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d112      	bne.n	8005f72 <USB_ActivateEndpoint+0x286>
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e02f      	b.n	8005fd2 <USB_ActivateEndpoint+0x2e6>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b3e      	cmp	r3, #62	; 0x3e
 8005f78:	d813      	bhi.n	8005fa2 <USB_ActivateEndpoint+0x2b6>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	663b      	str	r3, [r7, #96]	; 0x60
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <USB_ActivateEndpoint+0x2a8>
 8005f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f90:	3301      	adds	r3, #1
 8005f92:	663b      	str	r3, [r7, #96]	; 0x60
 8005f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e017      	b.n	8005fd2 <USB_ActivateEndpoint+0x2e6>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <USB_ActivateEndpoint+0x2d0>
 8005fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	663b      	str	r3, [r7, #96]	; 0x60
 8005fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	83fb      	strh	r3, [r7, #30]
 8005fe0:	8bfb      	ldrh	r3, [r7, #30]
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01b      	beq.n	8006022 <USB_ActivateEndpoint+0x336>
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	83bb      	strh	r3, [r7, #28]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	8bbb      	ldrh	r3, [r7, #28]
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	837b      	strh	r3, [r7, #26]
 800603a:	8b7b      	ldrh	r3, [r7, #26]
 800603c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006040:	837b      	strh	r3, [r7, #26]
 8006042:	8b7b      	ldrh	r3, [r7, #26]
 8006044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006048:	837b      	strh	r3, [r7, #26]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8b7b      	ldrh	r3, [r7, #26]
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
 800606a:	e1a2      	b.n	80063b2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b8:	4413      	add	r3, r2
 80060ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	011a      	lsls	r2, r3, #4
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	657b      	str	r3, [r7, #84]	; 0x54
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	891b      	ldrh	r3, [r3, #8]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	653b      	str	r3, [r7, #80]	; 0x50
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ec:	4413      	add	r3, r2
 80060ee:	653b      	str	r3, [r7, #80]	; 0x50
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	011a      	lsls	r2, r3, #4
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	895b      	ldrh	r3, [r3, #10]
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 8091 	bne.w	800623c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800612a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01b      	beq.n	800616a <USB_ActivateEndpoint+0x47e>
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	877b      	strh	r3, [r7, #58]	; 0x3a
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	441a      	add	r2, r3
 8006154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006166:	b29b      	uxth	r3, r3
 8006168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	873b      	strh	r3, [r7, #56]	; 0x38
 8006178:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01b      	beq.n	80061ba <USB_ActivateEndpoint+0x4ce>
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	86fb      	strh	r3, [r7, #54]	; 0x36
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006218:	867b      	strh	r3, [r7, #50]	; 0x32
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
 800623a:	e0ba      	b.n	80063b2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800624c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01d      	beq.n	8006294 <USB_ActivateEndpoint+0x5a8>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80062a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01d      	beq.n	80062ec <USB_ActivateEndpoint+0x600>
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	78db      	ldrb	r3, [r3, #3]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d024      	beq.n	800633e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800630e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006312:	f083 0320 	eor.w	r3, r3, #32
 8006316:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]
 800633c:	e01d      	b.n	800637a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80063b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	376c      	adds	r7, #108	; 0x6c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b08d      	sub	sp, #52	; 0x34
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	7b1b      	ldrb	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 808e 	bne.w	80064f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d044      	beq.n	8006466 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	81bb      	strh	r3, [r7, #12]
 80063ea:	89bb      	ldrh	r3, [r7, #12]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <USB_DeactivateEndpoint+0x6c>
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	817b      	strh	r3, [r7, #10]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006442:	813b      	strh	r3, [r7, #8]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	893b      	ldrh	r3, [r7, #8]
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]
 8006464:	e192      	b.n	800678c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	827b      	strh	r3, [r7, #18]
 8006474:	8a7b      	ldrh	r3, [r7, #18]
 8006476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01b      	beq.n	80064b6 <USB_DeactivateEndpoint+0xf6>
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	823b      	strh	r3, [r7, #16]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	8a3b      	ldrh	r3, [r7, #16]
 80064a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	81fb      	strh	r3, [r7, #14]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8013      	strh	r3, [r2, #0]
 80064ee:	e14d      	b.n	800678c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 80a5 	bne.w	8006644 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	843b      	strh	r3, [r7, #32]
 8006508:	8c3b      	ldrh	r3, [r7, #32]
 800650a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01b      	beq.n	800654a <USB_DeactivateEndpoint+0x18a>
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006528:	83fb      	strh	r3, [r7, #30]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	441a      	add	r2, r3
 8006534:	8bfb      	ldrh	r3, [r7, #30]
 8006536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006546:	b29b      	uxth	r3, r3
 8006548:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	83bb      	strh	r3, [r7, #28]
 8006558:	8bbb      	ldrh	r3, [r7, #28]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01b      	beq.n	800659a <USB_DeactivateEndpoint+0x1da>
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006578:	837b      	strh	r3, [r7, #26]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	8b7b      	ldrh	r3, [r7, #26]
 8006586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006596:	b29b      	uxth	r3, r3
 8006598:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	833b      	strh	r3, [r7, #24]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	8b3b      	ldrh	r3, [r7, #24]
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e8:	82fb      	strh	r3, [r7, #22]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	8afb      	ldrh	r3, [r7, #22]
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006620:	82bb      	strh	r3, [r7, #20]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	8abb      	ldrh	r3, [r7, #20]
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
 8006642:	e0a3      	b.n	800678c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <USB_DeactivateEndpoint+0x2d4>
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	441a      	add	r2, r3
 800667e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	b29b      	uxth	r3, r3
 8006692:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80066a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01b      	beq.n	80066e4 <USB_DeactivateEndpoint+0x324>
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006732:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	b29b      	uxth	r3, r3
 8006752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	847b      	strh	r3, [r7, #34]	; 0x22
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3734      	adds	r7, #52	; 0x34
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b0cc      	sub	sp, #304	; 0x130
 800679c:	af00      	add	r7, sp, #0
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067a6:	6018      	str	r0, [r3, #0]
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	f041 817d 	bne.w	8007abe <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d908      	bls.n	80067f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80067f0:	e007      	b.n	8006802 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	7b1b      	ldrb	r3, [r3, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d152      	bne.n	80068b8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6959      	ldr	r1, [r3, #20]
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	88da      	ldrh	r2, [r3, #6]
 800682a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682e:	b29b      	uxth	r3, r3
 8006830:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006834:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006838:	6800      	ldr	r0, [r0, #0]
 800683a:	f001 ff23 	bl	8008684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006846:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800684a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	4619      	mov	r1, r3
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800686c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006870:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	440a      	add	r2, r1
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	011a      	lsls	r2, r3, #4
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4413      	add	r3, r2
 8006894:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	f001 b8b5 	b.w	8007a22 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	78db      	ldrb	r3, [r3, #3]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	f040 84c6 	bne.w	8007256 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6a1a      	ldr	r2, [r3, #32]
 80068d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f240 8443 	bls.w	800716e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	441a      	add	r2, r3
 800692c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006938:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	1ad2      	subs	r2, r2, r3
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 823e 	beq.w	8006e06 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006996:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800699a:	6812      	ldr	r2, [r2, #0]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 809a 	bne.w	8006ae4 <USB_EPStartXfer+0x34c>
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	440a      	add	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	011a      	lsls	r2, r3, #4
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d122      	bne.n	8006a62 <USB_EPStartXfer+0x2ca>
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e079      	b.n	8006b56 <USB_EPStartXfer+0x3be>
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	2b3e      	cmp	r3, #62	; 0x3e
 8006a68:	d81b      	bhi.n	8006aa2 <USB_EPStartXfer+0x30a>
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <USB_EPStartXfer+0x2f2>
 8006a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a84:	3301      	adds	r3, #1
 8006a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	029b      	lsls	r3, r3, #10
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e059      	b.n	8006b56 <USB_EPStartXfer+0x3be>
 8006aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <USB_EPStartXfer+0x32a>
 8006ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006abc:	3b01      	subs	r3, #1
 8006abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e038      	b.n	8006b56 <USB_EPStartXfer+0x3be>
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d130      	bne.n	8006b56 <USB_EPStartXfer+0x3be>
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b12:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	440a      	add	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	011a      	lsls	r2, r3, #4
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	895b      	ldrh	r3, [r3, #10]
 8006b62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6959      	ldr	r1, [r3, #20]
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b84:	6800      	ldr	r0, [r0, #0]
 8006b86:	f001 fd7d 	bl	8008684 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9a:	441a      	add	r2, r3
 8006b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a1a      	ldr	r2, [r3, #32]
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d90f      	bls.n	8006be4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	1ad2      	subs	r2, r2, r3
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	621a      	str	r2, [r3, #32]
 8006be2:	e00e      	b.n	8006c02 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 809a 	bne.w	8006d48 <USB_EPStartXfer+0x5b0>
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c46:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	011a      	lsls	r2, r3, #4
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d122      	bne.n	8006cc6 <USB_EPStartXfer+0x52e>
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e083      	b.n	8006dce <USB_EPStartXfer+0x636>
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cca:	2b3e      	cmp	r3, #62	; 0x3e
 8006ccc:	d81b      	bhi.n	8006d06 <USB_EPStartXfer+0x56e>
 8006cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <USB_EPStartXfer+0x556>
 8006ce4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	029b      	lsls	r3, r3, #10
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	e063      	b.n	8006dce <USB_EPStartXfer+0x636>
 8006d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <USB_EPStartXfer+0x58e>
 8006d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	029b      	lsls	r3, r3, #10
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e042      	b.n	8006dce <USB_EPStartXfer+0x636>
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d13a      	bne.n	8006dce <USB_EPStartXfer+0x636>
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	440a      	add	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	011a      	lsls	r2, r3, #4
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	891b      	ldrh	r3, [r3, #8]
 8006dda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006df4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006df8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dfc:	6800      	ldr	r0, [r0, #0]
 8006dfe:	f001 fc41 	bl	8008684 <USB_WritePMA>
 8006e02:	f000 be0e 	b.w	8007a22 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d16d      	bne.n	8006ef2 <USB_EPStartXfer+0x75a>
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	4413      	add	r3, r2
 8006e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	011a      	lsls	r2, r3, #4
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e50:	647b      	str	r3, [r7, #68]	; 0x44
 8006e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d112      	bne.n	8006e80 <USB_EPStartXfer+0x6e8>
 8006e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	e063      	b.n	8006f48 <USB_EPStartXfer+0x7b0>
 8006e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e84:	2b3e      	cmp	r3, #62	; 0x3e
 8006e86:	d817      	bhi.n	8006eb8 <USB_EPStartXfer+0x720>
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USB_EPStartXfer+0x710>
 8006e9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e047      	b.n	8006f48 <USB_EPStartXfer+0x7b0>
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <USB_EPStartXfer+0x740>
 8006ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e02a      	b.n	8006f48 <USB_EPStartXfer+0x7b0>
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d122      	bne.n	8006f48 <USB_EPStartXfer+0x7b0>
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f22:	4413      	add	r3, r2
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	011a      	lsls	r2, r3, #4
 8006f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f36:	4413      	add	r3, r2
 8006f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	891b      	ldrh	r3, [r3, #8]
 8006f54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6959      	ldr	r1, [r3, #20]
 8006f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	f001 fb84 	bl	8008684 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8c:	441a      	add	r2, r3
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a1a      	ldr	r2, [r3, #32]
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d90f      	bls.n	8006fd6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6a1a      	ldr	r2, [r3, #32]
 8006fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	621a      	str	r2, [r3, #32]
 8006fd4:	e00e      	b.n	8006ff4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d16d      	bne.n	80070ec <USB_EPStartXfer+0x954>
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	4413      	add	r3, r2
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	4413      	add	r3, r2
 8007046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
 800704c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d112      	bne.n	800707a <USB_EPStartXfer+0x8e2>
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800705e:	b29a      	uxth	r2, r3
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007072:	b29a      	uxth	r2, r3
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	e05d      	b.n	8007136 <USB_EPStartXfer+0x99e>
 800707a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707e:	2b3e      	cmp	r3, #62	; 0x3e
 8007080:	d817      	bhi.n	80070b2 <USB_EPStartXfer+0x91a>
 8007082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800708c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <USB_EPStartXfer+0x90a>
 8007098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800709c:	3301      	adds	r3, #1
 800709e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	029b      	lsls	r3, r3, #10
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e041      	b.n	8007136 <USB_EPStartXfer+0x99e>
 80070b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <USB_EPStartXfer+0x93a>
 80070c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070cc:	3b01      	subs	r3, #1
 80070ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e024      	b.n	8007136 <USB_EPStartXfer+0x99e>
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d11c      	bne.n	8007136 <USB_EPStartXfer+0x99e>
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007110:	4413      	add	r3, r2
 8007112:	643b      	str	r3, [r7, #64]	; 0x40
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007124:	4413      	add	r3, r2
 8007126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	b29a      	uxth	r2, r3
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	895b      	ldrh	r3, [r3, #10]
 8007142:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6959      	ldr	r1, [r3, #20]
 8007152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007156:	b29b      	uxth	r3, r3
 8007158:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800715c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007160:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007164:	6800      	ldr	r0, [r0, #0]
 8007166:	f001 fa8d 	bl	8008684 <USB_WritePMA>
 800716a:	f000 bc5a 	b.w	8007a22 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80071a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fa:	4413      	add	r3, r2
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	011a      	lsls	r2, r3, #4
 800720c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800720e:	4413      	add	r3, r2
 8007210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007214:	65bb      	str	r3, [r7, #88]	; 0x58
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	b29a      	uxth	r2, r3
 800721c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	891b      	ldrh	r3, [r3, #8]
 800722c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6959      	ldr	r1, [r3, #20]
 800723c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007240:	b29b      	uxth	r3, r3
 8007242:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007246:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800724a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	f001 fa18 	bl	8008684 <USB_WritePMA>
 8007254:	e3e5      	b.n	8007a22 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80072b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	1ad2      	subs	r2, r2, r3
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 81bc 	beq.w	8007670 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d16d      	bne.n	80073f2 <USB_EPStartXfer+0xc5a>
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	67bb      	str	r3, [r7, #120]	; 0x78
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007330:	b29b      	uxth	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007336:	4413      	add	r3, r2
 8007338:	67bb      	str	r3, [r7, #120]	; 0x78
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	011a      	lsls	r2, r3, #4
 8007348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734a:	4413      	add	r3, r2
 800734c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
 8007352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d112      	bne.n	8007380 <USB_EPStartXfer+0xbe8>
 800735a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007364:	b29a      	uxth	r2, r3
 8007366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007378:	b29a      	uxth	r2, r3
 800737a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e060      	b.n	8007442 <USB_EPStartXfer+0xcaa>
 8007380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007384:	2b3e      	cmp	r3, #62	; 0x3e
 8007386:	d817      	bhi.n	80073b8 <USB_EPStartXfer+0xc20>
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <USB_EPStartXfer+0xc10>
 800739e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073a2:	3301      	adds	r3, #1
 80073a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	029b      	lsls	r3, r3, #10
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e044      	b.n	8007442 <USB_EPStartXfer+0xcaa>
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <USB_EPStartXfer+0xc40>
 80073ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073d2:	3b01      	subs	r3, #1
 80073d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073dc:	b29b      	uxth	r3, r3
 80073de:	029b      	lsls	r3, r3, #10
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e027      	b.n	8007442 <USB_EPStartXfer+0xcaa>
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d11f      	bne.n	8007442 <USB_EPStartXfer+0xcaa>
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007418:	4413      	add	r3, r2
 800741a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	011a      	lsls	r2, r3, #4
 800742c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007430:	4413      	add	r3, r2
 8007432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743c:	b29a      	uxth	r2, r3
 800743e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007440:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	895b      	ldrh	r3, [r3, #10]
 800744e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6959      	ldr	r1, [r3, #20]
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	b29b      	uxth	r3, r3
 8007464:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007468:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800746c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007470:	6800      	ldr	r0, [r0, #0]
 8007472:	f001 f907 	bl	8008684 <USB_WritePMA>
          ep->xfer_buff += len;
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007486:	441a      	add	r2, r3
 8007488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d90f      	bls.n	80074d0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	621a      	str	r2, [r3, #32]
 80074ce:	e00e      	b.n	80074ee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8295 	beq.w	8007a22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d16d      	bne.n	80075e4 <USB_EPStartXfer+0xe4c>
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	66bb      	str	r3, [r7, #104]	; 0x68
 8007514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007528:	4413      	add	r3, r2
 800752a:	66bb      	str	r3, [r7, #104]	; 0x68
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	011a      	lsls	r2, r3, #4
 800753a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800753c:	4413      	add	r3, r2
 800753e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007542:	667b      	str	r3, [r7, #100]	; 0x64
 8007544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d112      	bne.n	8007572 <USB_EPStartXfer+0xdda>
 800754c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007556:	b29a      	uxth	r2, r3
 8007558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756a:	b29a      	uxth	r2, r3
 800756c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	e063      	b.n	800763a <USB_EPStartXfer+0xea2>
 8007572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007576:	2b3e      	cmp	r3, #62	; 0x3e
 8007578:	d817      	bhi.n	80075aa <USB_EPStartXfer+0xe12>
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <USB_EPStartXfer+0xe02>
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	3301      	adds	r3, #1
 8007596:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	b29b      	uxth	r3, r3
 80075a0:	029b      	lsls	r3, r3, #10
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e047      	b.n	800763a <USB_EPStartXfer+0xea2>
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <USB_EPStartXfer+0xe32>
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	3b01      	subs	r3, #1
 80075c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80075ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	029b      	lsls	r3, r3, #10
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e02a      	b.n	800763a <USB_EPStartXfer+0xea2>
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d122      	bne.n	800763a <USB_EPStartXfer+0xea2>
 80075f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007614:	4413      	add	r3, r2
 8007616:	673b      	str	r3, [r7, #112]	; 0x70
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	011a      	lsls	r2, r3, #4
 8007626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007628:	4413      	add	r3, r2
 800762a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800762e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	b29a      	uxth	r2, r3
 8007636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	891b      	ldrh	r3, [r3, #8]
 8007646:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6959      	ldr	r1, [r3, #20]
 8007656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765a:	b29b      	uxth	r3, r3
 800765c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007660:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007664:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007668:	6800      	ldr	r0, [r0, #0]
 800766a:	f001 f80b 	bl	8008684 <USB_WritePMA>
 800766e:	e1d8      	b.n	8007a22 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d178      	bne.n	8007772 <USB_EPStartXfer+0xfda>
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a4:	4413      	add	r3, r2
 80076a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	011a      	lsls	r2, r3, #4
 80076b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076bc:	4413      	add	r3, r2
 80076be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d116      	bne.n	80076fc <USB_EPStartXfer+0xf64>
 80076ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e06b      	b.n	80077d4 <USB_EPStartXfer+0x103c>
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	2b3e      	cmp	r3, #62	; 0x3e
 8007702:	d818      	bhi.n	8007736 <USB_EPStartXfer+0xf9e>
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800770e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USB_EPStartXfer+0xf8c>
 800771a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800771e:	3301      	adds	r3, #1
 8007720:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29a      	uxth	r2, r3
 800772e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e04e      	b.n	80077d4 <USB_EPStartXfer+0x103c>
 8007736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773a:	095b      	lsrs	r3, r3, #5
 800773c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <USB_EPStartXfer+0xfbe>
 800774c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007750:	3b01      	subs	r3, #1
 8007752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007756:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800775a:	b29b      	uxth	r3, r3
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e030      	b.n	80077d4 <USB_EPStartXfer+0x103c>
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d128      	bne.n	80077d4 <USB_EPStartXfer+0x103c>
 8007782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077a6:	4413      	add	r3, r2
 80077a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	011a      	lsls	r2, r3, #4
 80077ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077be:	4413      	add	r3, r2
 80077c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	891b      	ldrh	r3, [r3, #8]
 80077e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6959      	ldr	r1, [r3, #20]
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	f000 ff3e 	bl	8008684 <USB_WritePMA>
          ep->xfer_buff += len;
 8007808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	441a      	add	r2, r3
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a1a      	ldr	r2, [r3, #32]
 8007832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	d90f      	bls.n	8007862 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6a1a      	ldr	r2, [r3, #32]
 800784e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	621a      	str	r2, [r3, #32]
 8007860:	e00e      	b.n	8007880 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80cc 	beq.w	8007a22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d178      	bne.n	800799a <USB_EPStartXfer+0x1202>
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078cc:	4413      	add	r3, r2
 80078ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	011a      	lsls	r2, r3, #4
 80078e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d116      	bne.n	8007924 <USB_EPStartXfer+0x118c>
 80078f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791a:	b29a      	uxth	r2, r3
 800791c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	e064      	b.n	80079ee <USB_EPStartXfer+0x1256>
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	2b3e      	cmp	r3, #62	; 0x3e
 800792a:	d818      	bhi.n	800795e <USB_EPStartXfer+0x11c6>
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <USB_EPStartXfer+0x11b4>
 8007942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007946:	3301      	adds	r3, #1
 8007948:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800794c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007950:	b29b      	uxth	r3, r3
 8007952:	029b      	lsls	r3, r3, #10
 8007954:	b29a      	uxth	r2, r3
 8007956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e047      	b.n	80079ee <USB_EPStartXfer+0x1256>
 800795e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <USB_EPStartXfer+0x11e6>
 8007974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007978:	3b01      	subs	r3, #1
 800797a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007982:	b29b      	uxth	r3, r3
 8007984:	029b      	lsls	r3, r3, #10
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007990:	b29a      	uxth	r2, r3
 8007992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e029      	b.n	80079ee <USB_EPStartXfer+0x1256>
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d121      	bne.n	80079ee <USB_EPStartXfer+0x1256>
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079c0:	4413      	add	r3, r2
 80079c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	011a      	lsls	r2, r3, #4
 80079d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d8:	4413      	add	r3, r2
 80079da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	895b      	ldrh	r3, [r3, #10]
 80079fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6959      	ldr	r1, [r3, #20]
 8007a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a1c:	6800      	ldr	r0, [r0, #0]
 8007a1e:	f000 fe31 	bl	8008684 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a44:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a50:	8013      	strh	r3, [r2, #0]
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a5e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a62:	8812      	ldrh	r2, [r2, #0]
 8007a64:	f082 0210 	eor.w	r2, r2, #16
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007a72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a76:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	f082 0220 	eor.w	r2, r2, #32
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	8013      	strh	r3, [r2, #0]
 8007aba:	f000 bc9f 	b.w	80083fc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	7b1b      	ldrb	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 80ae 	bne.w	8007c2c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699a      	ldr	r2, [r3, #24]
 8007adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d917      	bls.n	8007b1c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0c:	1ad2      	subs	r2, r2, r3
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	619a      	str	r2, [r3, #24]
 8007b1a:	e00e      	b.n	8007b3a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2200      	movs	r2, #0
 8007b38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b5e:	4413      	add	r3, r2
 8007b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	011a      	lsls	r2, r3, #4
 8007b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b76:	4413      	add	r3, r2
 8007b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d116      	bne.n	8007bb6 <USB_EPStartXfer+0x141e>
 8007b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e3e8      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
 8007bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bba:	2b3e      	cmp	r3, #62	; 0x3e
 8007bbc:	d818      	bhi.n	8007bf0 <USB_EPStartXfer+0x1458>
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USB_EPStartXfer+0x1446>
 8007bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	e3cb      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
 8007bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <USB_EPStartXfer+0x1478>
 8007c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	029b      	lsls	r3, r3, #10
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	e3ad      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	f040 8200 	bne.w	800803e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 8091 	bne.w	8007d72 <USB_EPStartXfer+0x15da>
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c74:	4413      	add	r3, r2
 8007c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	011a      	lsls	r2, r3, #4
 8007c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d116      	bne.n	8007cd4 <USB_EPStartXfer+0x153c>
 8007ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e083      	b.n	8007ddc <USB_EPStartXfer+0x1644>
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ce2:	d820      	bhi.n	8007d26 <USB_EPStartXfer+0x158e>
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <USB_EPStartXfer+0x157c>
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d22:	801a      	strh	r2, [r3, #0]
 8007d24:	e05a      	b.n	8007ddc <USB_EPStartXfer+0x1644>
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <USB_EPStartXfer+0x15be>
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	3b01      	subs	r3, #1
 8007d52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e034      	b.n	8007ddc <USB_EPStartXfer+0x1644>
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d12c      	bne.n	8007ddc <USB_EPStartXfer+0x1644>
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007da6:	4413      	add	r3, r2
 8007da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	011a      	lsls	r2, r3, #4
 8007dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8091 	bne.w	8007f1e <USB_EPStartXfer+0x1786>
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	011a      	lsls	r2, r3, #4
 8007e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d116      	bne.n	8007e80 <USB_EPStartXfer+0x16e8>
 8007e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	e07c      	b.n	8007f7a <USB_EPStartXfer+0x17e2>
 8007e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e8e:	d820      	bhi.n	8007ed2 <USB_EPStartXfer+0x173a>
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	085b      	lsrs	r3, r3, #1
 8007e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <USB_EPStartXfer+0x1728>
 8007eb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	029b      	lsls	r3, r3, #10
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e053      	b.n	8007f7a <USB_EPStartXfer+0x17e2>
 8007ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <USB_EPStartXfer+0x176a>
 8007ef8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007efc:	3b01      	subs	r3, #1
 8007efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	029b      	lsls	r3, r3, #10
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e02d      	b.n	8007f7a <USB_EPStartXfer+0x17e2>
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d125      	bne.n	8007f7a <USB_EPStartXfer+0x17e2>
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f44:	4413      	add	r3, r2
 8007f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	011a      	lsls	r2, r3, #4
 8007f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 81fe 	beq.w	8008388 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <USB_EPStartXfer+0x182c>
 8007fb8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10d      	bne.n	8007fe0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fc4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 81db 	bne.w	8008388 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 81d4 	bne.w	8008388 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800800a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008038:	b29b      	uxth	r3, r3
 800803a:	8013      	strh	r3, [r2, #0]
 800803c:	e1a4      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	78db      	ldrb	r3, [r3, #3]
 800804a:	2b01      	cmp	r3, #1
 800804c:	f040 819a 	bne.w	8008384 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	429a      	cmp	r2, r3
 800806a:	d917      	bls.n	800809c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800806c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800807c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808c:	1ad2      	subs	r2, r2, r3
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	619a      	str	r2, [r3, #24]
 800809a:	e00e      	b.n	80080ba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80080ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d178      	bne.n	80081bc <USB_EPStartXfer+0x1a24>
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	011a      	lsls	r2, r3, #4
 8008102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008106:	4413      	add	r3, r2
 8008108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800810c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d116      	bne.n	8008146 <USB_EPStartXfer+0x19ae>
 8008118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29a      	uxth	r2, r3
 800813e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	e06b      	b.n	800821e <USB_EPStartXfer+0x1a86>
 8008146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814a:	2b3e      	cmp	r3, #62	; 0x3e
 800814c:	d818      	bhi.n	8008180 <USB_EPStartXfer+0x19e8>
 800814e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <USB_EPStartXfer+0x19d6>
 8008164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008168:	3301      	adds	r3, #1
 800816a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008172:	b29b      	uxth	r3, r3
 8008174:	029b      	lsls	r3, r3, #10
 8008176:	b29a      	uxth	r2, r3
 8008178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	e04e      	b.n	800821e <USB_EPStartXfer+0x1a86>
 8008180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008184:	095b      	lsrs	r3, r3, #5
 8008186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800818a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <USB_EPStartXfer+0x1a08>
 8008196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800819a:	3b01      	subs	r3, #1
 800819c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	029b      	lsls	r3, r3, #10
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e030      	b.n	800821e <USB_EPStartXfer+0x1a86>
 80081bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d128      	bne.n	800821e <USB_EPStartXfer+0x1a86>
 80081cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	4413      	add	r3, r2
 80081f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	011a      	lsls	r2, r3, #4
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	4413      	add	r3, r2
 800820a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800820e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d178      	bne.n	800832e <USB_EPStartXfer+0x1b96>
 800823c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800824a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008258:	b29b      	uxth	r3, r3
 800825a:	461a      	mov	r2, r3
 800825c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008260:	4413      	add	r3, r2
 8008262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	011a      	lsls	r2, r3, #4
 8008274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008278:	4413      	add	r3, r2
 800827a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800827e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d116      	bne.n	80082b8 <USB_EPStartXfer+0x1b20>
 800828a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008296:	b29a      	uxth	r2, r3
 8008298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e067      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
 80082b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082bc:	2b3e      	cmp	r3, #62	; 0x3e
 80082be:	d818      	bhi.n	80082f2 <USB_EPStartXfer+0x1b5a>
 80082c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c4:	085b      	lsrs	r3, r3, #1
 80082c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <USB_EPStartXfer+0x1b48>
 80082d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082da:	3301      	adds	r3, #1
 80082dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	029b      	lsls	r3, r3, #10
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	e04a      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
 80082f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2b00      	cmp	r3, #0
 8008306:	d104      	bne.n	8008312 <USB_EPStartXfer+0x1b7a>
 8008308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800830c:	3b01      	subs	r3, #1
 800830e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008316:	b29b      	uxth	r3, r3
 8008318:	029b      	lsls	r3, r3, #10
 800831a:	b29b      	uxth	r3, r3
 800831c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008324:	b29a      	uxth	r2, r3
 8008326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800832a:	801a      	strh	r2, [r3, #0]
 800832c:	e02c      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
 800832e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d124      	bne.n	8008388 <USB_EPStartXfer+0x1bf0>
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834c:	b29b      	uxth	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	4413      	add	r3, r2
 8008356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800835a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	011a      	lsls	r2, r3, #4
 8008368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836c:	4413      	add	r3, r2
 800836e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008372:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837a:	b29a      	uxth	r2, r3
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	e001      	b.n	8008388 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e03a      	b.n	80083fe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	441a      	add	r2, r3
 80083e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008430:	81bb      	strh	r3, [r7, #12]
 8008432:	89bb      	ldrh	r3, [r7, #12]
 8008434:	f083 0310 	eor.w	r3, r3, #16
 8008438:	81bb      	strh	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	89bb      	ldrh	r3, [r7, #12]
 8008446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008456:	b29b      	uxth	r3, r3
 8008458:	8013      	strh	r3, [r2, #0]
 800845a:	e01f      	b.n	800849c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	81fb      	strh	r3, [r7, #14]
 8008474:	89fb      	ldrh	r3, [r7, #14]
 8008476:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800847a:	81fb      	strh	r3, [r7, #14]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	89fb      	ldrh	r3, [r7, #14]
 8008488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	b29b      	uxth	r3, r3
 800849a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	7b1b      	ldrb	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 809d 	bne.w	80085f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d04c      	beq.n	800855e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	823b      	strh	r3, [r7, #16]
 80084d2:	8a3b      	ldrh	r3, [r7, #16]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <USB_EPClearStall+0x6c>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	81fb      	strh	r3, [r7, #14]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	89fb      	ldrh	r3, [r7, #14]
 8008500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800850c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008510:	b29b      	uxth	r3, r3
 8008512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d06c      	beq.n	80085f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008532:	81bb      	strh	r3, [r7, #12]
 8008534:	89bb      	ldrh	r3, [r7, #12]
 8008536:	f083 0320 	eor.w	r3, r3, #32
 800853a:	81bb      	strh	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	441a      	add	r2, r3
 8008546:	89bb      	ldrh	r3, [r7, #12]
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]
 800855c:	e04b      	b.n	80085f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	82fb      	strh	r3, [r7, #22]
 800856c:	8afb      	ldrh	r3, [r7, #22]
 800856e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01b      	beq.n	80085ae <USB_EPClearStall+0x106>
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	82bb      	strh	r3, [r7, #20]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	8abb      	ldrh	r3, [r7, #20]
 800859a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c4:	827b      	strh	r3, [r7, #18]
 80085c6:	8a7b      	ldrh	r3, [r7, #18]
 80085c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085cc:	827b      	strh	r3, [r7, #18]
 80085ce:	8a7b      	ldrh	r3, [r7, #18]
 80085d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085d4:	827b      	strh	r3, [r7, #18]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	441a      	add	r2, r3
 80085e0:	8a7b      	ldrh	r3, [r7, #18]
 80085e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr

08008602 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2280      	movs	r2, #128	; 0x80
 8008618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr

0800863c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800865e:	b29b      	uxth	r3, r3
 8008660:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008662:	68fb      	ldr	r3, [r7, #12]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008684:	b480      	push	{r7}
 8008686:	b08d      	sub	sp, #52	; 0x34
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	460b      	mov	r3, r1
 8008694:	80fb      	strh	r3, [r7, #6]
 8008696:	4613      	mov	r3, r2
 8008698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800869a:	88bb      	ldrh	r3, [r7, #4]
 800869c:	3301      	adds	r3, #1
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	005a      	lsls	r2, r3, #1
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086bc:	e01e      	b.n	80086fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	3301      	adds	r3, #1
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	b29a      	uxth	r2, r3
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	3302      	adds	r3, #2
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	3302      	adds	r3, #2
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	3301      	adds	r3, #1
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	3b01      	subs	r3, #1
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1dd      	bne.n	80086be <USB_WritePMA+0x3a>
  }
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	3734      	adds	r7, #52	; 0x34
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800870e:	b480      	push	{r7}
 8008710:	b08b      	sub	sp, #44	; 0x2c
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	460b      	mov	r3, r1
 800871e:	80fb      	strh	r3, [r7, #6]
 8008720:	4613      	mov	r3, r2
 8008722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008724:	88bb      	ldrh	r3, [r7, #4]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	b29b      	uxth	r3, r3
 800872a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008734:	88fb      	ldrh	r3, [r7, #6]
 8008736:	005a      	lsls	r2, r3, #1
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008740:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
 8008746:	e01b      	b.n	8008780 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	3302      	adds	r3, #2
 8008754:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	b2da      	uxtb	r2, r3
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	3301      	adds	r3, #1
 8008762:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	b2da      	uxtb	r2, r3
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	3301      	adds	r3, #1
 8008772:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	3302      	adds	r3, #2
 8008778:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	3b01      	subs	r3, #1
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e0      	bne.n	8008748 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008786:	88bb      	ldrh	r3, [r7, #4]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	b2da      	uxtb	r2, r3
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	701a      	strb	r2, [r3, #0]
  }
}
 80087a2:	bf00      	nop
 80087a4:	372c      	adds	r7, #44	; 0x2c
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80087bc:	2302      	movs	r3, #2
 80087be:	2203      	movs	r2, #3
 80087c0:	2181      	movs	r1, #129	; 0x81
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fd5b 	bl	800a27e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80087ce:	2302      	movs	r3, #2
 80087d0:	2203      	movs	r2, #3
 80087d2:	2101      	movs	r1, #1
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fd52 	bl	800a27e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80087e2:	2054      	movs	r0, #84	; 0x54
 80087e4:	f001 fe60 	bl	800a4a8 <USBD_static_malloc>
 80087e8:	4602      	mov	r2, r0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80087fa:	2301      	movs	r3, #1
 80087fc:	73fb      	strb	r3, [r7, #15]
 80087fe:	e012      	b.n	8008826 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008806:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	2101      	movs	r1, #1
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fe1d 	bl	800a460 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800883c:	2181      	movs	r1, #129	; 0x81
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 fd43 	bl	800a2ca <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fd3c 	bl	800a2ca <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00e      	beq.n	8008882 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	4618      	mov	r0, r3
 8008876:	f001 fe23 	bl	800a4c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d051      	beq.n	800895e <USBD_CUSTOM_HID_Setup+0xd2>
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	f040 80d8 	bne.w	8008a70 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	3b02      	subs	r3, #2
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	d841      	bhi.n	800894e <USBD_CUSTOM_HID_Setup+0xc2>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <USBD_CUSTOM_HID_Setup+0x44>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	08008929 	.word	0x08008929
 80088d4:	08008907 	.word	0x08008907
 80088d8:	0800894f 	.word	0x0800894f
 80088dc:	0800894f 	.word	0x0800894f
 80088e0:	0800894f 	.word	0x0800894f
 80088e4:	0800894f 	.word	0x0800894f
 80088e8:	0800894f 	.word	0x0800894f
 80088ec:	08008939 	.word	0x08008939
 80088f0:	08008917 	.word	0x08008917
 80088f4:	080088f9 	.word	0x080088f9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008904:	e02a      	b.n	800895c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3340      	adds	r3, #64	; 0x40
 800890a:	2201      	movs	r2, #1
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f99f 	bl	8009c52 <USBD_CtlSendData>
          break;
 8008914:	e022      	b.n	800895c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008926:	e019      	b.n	800895c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	3344      	adds	r3, #68	; 0x44
 800892c:	2201      	movs	r2, #1
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f98e 	bl	8009c52 <USBD_CtlSendData>
          break;
 8008936:	e011      	b.n	800895c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2201      	movs	r2, #1
 800893c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800893e:	6939      	ldr	r1, [r7, #16]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	88db      	ldrh	r3, [r3, #6]
 8008944:	461a      	mov	r2, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 f9b1 	bl	8009cae <USBD_CtlPrepareRx>
          break;
 800894c:	e006      	b.n	800895c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 f914 	bl	8009b7e <USBD_CtlError>
          ret = USBD_FAIL;
 8008956:	2302      	movs	r3, #2
 8008958:	75fb      	strb	r3, [r7, #23]
          break;
 800895a:	bf00      	nop
      }
      break;
 800895c:	e08f      	b.n	8008a7e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b0b      	cmp	r3, #11
 8008964:	d87c      	bhi.n	8008a60 <USBD_CUSTOM_HID_Setup+0x1d4>
 8008966:	a201      	add	r2, pc, #4	; (adr r2, 800896c <USBD_CUSTOM_HID_Setup+0xe0>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	0800899d 	.word	0x0800899d
 8008970:	08008a61 	.word	0x08008a61
 8008974:	08008a61 	.word	0x08008a61
 8008978:	08008a61 	.word	0x08008a61
 800897c:	08008a61 	.word	0x08008a61
 8008980:	08008a61 	.word	0x08008a61
 8008984:	080089c5 	.word	0x080089c5
 8008988:	08008a61 	.word	0x08008a61
 800898c:	08008a61 	.word	0x08008a61
 8008990:	08008a61 	.word	0x08008a61
 8008994:	08008a13 	.word	0x08008a13
 8008998:	08008a3b 	.word	0x08008a3b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d107      	bne.n	80089b6 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089a6:	f107 030e 	add.w	r3, r7, #14
 80089aa:	2202      	movs	r2, #2
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 f94f 	bl	8009c52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089b4:	e05b      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f8e0 	bl	8009b7e <USBD_CtlError>
            ret = USBD_FAIL;
 80089be:	2302      	movs	r3, #2
 80089c0:	75fb      	strb	r3, [r7, #23]
          break;
 80089c2:	e054      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	885b      	ldrh	r3, [r3, #2]
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	2b22      	cmp	r3, #34	; 0x22
 80089ce:	d10b      	bne.n	80089e8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	88db      	ldrh	r3, [r3, #6]
 80089d4:	2b38      	cmp	r3, #56	; 0x38
 80089d6:	bf28      	it	cs
 80089d8:	2338      	movcs	r3, #56	; 0x38
 80089da:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e00d      	b.n	8008a04 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	885b      	ldrh	r3, [r3, #2]
 80089ec:	0a1b      	lsrs	r3, r3, #8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b21      	cmp	r3, #33	; 0x21
 80089f2:	d107      	bne.n	8008a04 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80089f6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	88db      	ldrh	r3, [r3, #6]
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	bf28      	it	cs
 8008a00:	2309      	movcs	r3, #9
 8008a02:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008a04:	8bfb      	ldrh	r3, [r7, #30]
 8008a06:	461a      	mov	r2, r3
 8008a08:	69b9      	ldr	r1, [r7, #24]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 f921 	bl	8009c52 <USBD_CtlSendData>
          break;
 8008a10:	e02d      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d107      	bne.n	8008a2c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3348      	adds	r3, #72	; 0x48
 8008a20:	2201      	movs	r2, #1
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f914 	bl	8009c52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a2a:	e020      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 f8a5 	bl	8009b7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a34:	2302      	movs	r3, #2
 8008a36:	75fb      	strb	r3, [r7, #23]
          break;
 8008a38:	e019      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d106      	bne.n	8008a52 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	885b      	ldrh	r3, [r3, #2]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a50:	e00d      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 f892 	bl	8009b7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a5e:	e006      	b.n	8008a6e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 f88b 	bl	8009b7e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a6c:	bf00      	nop
      }
      break;
 8008a6e:	e006      	b.n	8008a7e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f883 	bl	8009b7e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7c:	bf00      	nop
  }
  return ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	200000cc 	.word	0x200000cc

08008a8c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d111      	bne.n	8008ad0 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	2181      	movs	r1, #129	; 0x81
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 fca8 	bl	800a41a <USBD_LL_Transmit>
 8008aca:	e001      	b.n	8008ad0 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2229      	movs	r2, #41	; 0x29
 8008ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008aea:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000048 	.word	0x20000048

08008afc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2229      	movs	r2, #41	; 0x29
 8008b08:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008b0a:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bc80      	pop	{r7}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000074 	.word	0x20000074

08008b1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2229      	movs	r2, #41	; 0x29
 8008b28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008b2a:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	200000a0 	.word	0x200000a0

08008b3c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b72:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	7810      	ldrb	r0, [r2, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	7852      	ldrb	r2, [r2, #1]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	2340      	movs	r3, #64	; 0x40
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fc66 	bl	800a460 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d10c      	bne.n	8008bd0 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	7810      	ldrb	r0, [r2, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	7852      	ldrb	r2, [r2, #1]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220a      	movs	r2, #10
 8008be8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	200000d8 	.word	0x200000d8

08008bfc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c06:	2302      	movs	r3, #2
 8008c08:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr

08008c28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e01a      	b.n	8008c76 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	79fa      	ldrb	r2, [r7, #7]
 8008c6c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 fa9a 	bl	800a1a8 <USBD_LL_Init>

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
 8008c9e:	e001      	b.n	8008ca4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fac5 	bl	800a248 <USBD_LL_Start>

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	4611      	mov	r1, r2
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fed7 	bl	8009b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d74:	f003 031f 	and.w	r3, r3, #31
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d016      	beq.n	8008daa <USBD_LL_SetupStage+0x6a>
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d81c      	bhi.n	8008dba <USBD_LL_SetupStage+0x7a>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <USBD_LL_SetupStage+0x4a>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d008      	beq.n	8008d9a <USBD_LL_SetupStage+0x5a>
 8008d88:	e017      	b.n	8008dba <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f9ca 	bl	800912c <USBD_StdDevReq>
      break;
 8008d98:	e01a      	b.n	8008dd0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa2c 	bl	8009200 <USBD_StdItfReq>
      break;
 8008da8:	e012      	b.n	8008dd0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa6c 	bl	8009290 <USBD_StdEPReq>
      break;
 8008db8:	e00a      	b.n	8008dd0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fa9d 	bl	800a308 <USBD_LL_StallEP>
      break;
 8008dce:	bf00      	nop
  }

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	460b      	mov	r3, r1
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d14b      	bne.n	8008e86 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008df4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d134      	bne.n	8008e6a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d919      	bls.n	8008e40 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	1ad2      	subs	r2, r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d203      	bcs.n	8008e2e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	e002      	b.n	8008e34 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 ff56 	bl	8009cea <USBD_CtlContinueRx>
 8008e3e:	e038      	b.n	8008eb2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d105      	bne.n	8008e62 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 ff53 	bl	8009d0e <USBD_CtlSendStatus>
 8008e68:	e023      	b.n	8008eb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e70:	2b05      	cmp	r3, #5
 8008e72:	d11e      	bne.n	8008eb2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f001 fa42 	bl	800a308 <USBD_LL_StallEP>
 8008e84:	e015      	b.n	8008eb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d108      	bne.n	8008eae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	7afa      	ldrb	r2, [r7, #11]
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	4798      	blx	r3
 8008eac:	e001      	b.n	8008eb2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e000      	b.n	8008eb4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d17f      	bne.n	8008fd0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3314      	adds	r3, #20
 8008ed4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d15c      	bne.n	8008f9a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d915      	bls.n	8008f18 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	1ad2      	subs	r2, r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 fec0 	bl	8009c8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f001 faa5 	bl	800a460 <USBD_LL_PrepareReceive>
 8008f16:	e04e      	b.n	8008fb6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	6912      	ldr	r2, [r2, #16]
 8008f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f24:	fb01 f202 	mul.w	r2, r1, r2
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d11c      	bne.n	8008f68 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d316      	bcc.n	8008f68 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d20f      	bcs.n	8008f68 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fe9c 	bl	8009c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 fa7d 	bl	800a460 <USBD_LL_PrepareReceive>
 8008f66:	e026      	b.n	8008fb6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d105      	bne.n	8008f8a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f8a:	2180      	movs	r1, #128	; 0x80
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f001 f9bb 	bl	800a308 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 fece 	bl	8009d34 <USBD_CtlReceiveStatus>
 8008f98:	e00d      	b.n	8008fb6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d004      	beq.n	8008fae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f001 f9a9 	bl	800a308 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d11d      	bne.n	8008ffc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff fe81 	bl	8008cc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fce:	e015      	b.n	8008ffc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00d      	beq.n	8008ff8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d108      	bne.n	8008ff8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	7afa      	ldrb	r2, [r7, #11]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	4798      	blx	r3
 8008ff6:	e001      	b.n	8008ffc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e000      	b.n	8008ffe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800900e:	2340      	movs	r3, #64	; 0x40
 8009010:	2200      	movs	r2, #0
 8009012:	2100      	movs	r1, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f932 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2240      	movs	r2, #64	; 0x40
 8009026:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	2200      	movs	r2, #0
 800902e:	2180      	movs	r1, #128	; 0x80
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f924 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2240      	movs	r2, #64	; 0x40
 8009040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6852      	ldr	r2, [r2, #4]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	4611      	mov	r1, r2
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
  }

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr

080090a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2204      	movs	r2, #4
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr

080090ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d105      	bne.n	80090ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr

080090f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009106:	2b03      	cmp	r3, #3
 8009108:	d10b      	bne.n	8009122 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d005      	beq.n	8009152 <USBD_StdDevReq+0x26>
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d84f      	bhi.n	80091ea <USBD_StdDevReq+0xbe>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <USBD_StdDevReq+0x36>
 800914e:	2b20      	cmp	r3, #32
 8009150:	d14b      	bne.n	80091ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
      break;
 8009160:	e048      	b.n	80091f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b09      	cmp	r3, #9
 8009168:	d839      	bhi.n	80091de <USBD_StdDevReq+0xb2>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <USBD_StdDevReq+0x44>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091df 	.word	0x080091df
 800917c:	080091cb 	.word	0x080091cb
 8009180:	080091df 	.word	0x080091df
 8009184:	080091a3 	.word	0x080091a3
 8009188:	08009199 	.word	0x08009199
 800918c:	080091df 	.word	0x080091df
 8009190:	080091b7 	.word	0x080091b7
 8009194:	080091ad 	.word	0x080091ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f9dc 	bl	8009558 <USBD_GetDescriptor>
          break;
 80091a0:	e022      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fb3f 	bl	8009828 <USBD_SetAddress>
          break;
 80091aa:	e01d      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fb7e 	bl	80098b0 <USBD_SetConfig>
          break;
 80091b4:	e018      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc07 	bl	80099cc <USBD_GetConfig>
          break;
 80091be:	e013      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fc37 	bl	8009a36 <USBD_GetStatus>
          break;
 80091c8:	e00e      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fc65 	bl	8009a9c <USBD_SetFeature>
          break;
 80091d2:	e009      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fc74 	bl	8009ac4 <USBD_ClrFeature>
          break;
 80091dc:	e004      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fccc 	bl	8009b7e <USBD_CtlError>
          break;
 80091e6:	bf00      	nop
      }
      break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fcc6 	bl	8009b7e <USBD_CtlError>
      break;
 80091f2:	bf00      	nop
  }

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop

08009200 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d005      	beq.n	8009226 <USBD_StdItfReq+0x26>
 800921a:	2b40      	cmp	r3, #64	; 0x40
 800921c:	d82e      	bhi.n	800927c <USBD_StdItfReq+0x7c>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <USBD_StdItfReq+0x26>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d12a      	bne.n	800927c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922c:	3b01      	subs	r3, #1
 800922e:	2b02      	cmp	r3, #2
 8009230:	d81d      	bhi.n	800926e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	889b      	ldrh	r3, [r3, #4]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b01      	cmp	r3, #1
 800923a:	d813      	bhi.n	8009264 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d110      	bne.n	8009278 <USBD_StdItfReq+0x78>
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fd56 	bl	8009d0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009262:	e009      	b.n	8009278 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fc89 	bl	8009b7e <USBD_CtlError>
          break;
 800926c:	e004      	b.n	8009278 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc84 	bl	8009b7e <USBD_CtlError>
          break;
 8009276:	e000      	b.n	800927a <USBD_StdItfReq+0x7a>
          break;
 8009278:	bf00      	nop
      }
      break;
 800927a:	e004      	b.n	8009286 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc7d 	bl	8009b7e <USBD_CtlError>
      break;
 8009284:	bf00      	nop
  }

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ac:	2b40      	cmp	r3, #64	; 0x40
 80092ae:	d007      	beq.n	80092c0 <USBD_StdEPReq+0x30>
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	f200 8146 	bhi.w	8009542 <USBD_StdEPReq+0x2b2>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <USBD_StdEPReq+0x40>
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	f040 8141 	bne.w	8009542 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
      break;
 80092ce:	e13d      	b.n	800954c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d10a      	bne.n	80092f2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	e12d      	b.n	800954e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d007      	beq.n	800930a <USBD_StdEPReq+0x7a>
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	f300 811b 	bgt.w	8009536 <USBD_StdEPReq+0x2a6>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d072      	beq.n	80093ea <USBD_StdEPReq+0x15a>
 8009304:	2b01      	cmp	r3, #1
 8009306:	d03a      	beq.n	800937e <USBD_StdEPReq+0xee>
 8009308:	e115      	b.n	8009536 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	2b02      	cmp	r3, #2
 8009312:	d002      	beq.n	800931a <USBD_StdEPReq+0x8a>
 8009314:	2b03      	cmp	r3, #3
 8009316:	d015      	beq.n	8009344 <USBD_StdEPReq+0xb4>
 8009318:	e02b      	b.n	8009372 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00c      	beq.n	800933a <USBD_StdEPReq+0xaa>
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b80      	cmp	r3, #128	; 0x80
 8009324:	d009      	beq.n	800933a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 ffec 	bl	800a308 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009330:	2180      	movs	r1, #128	; 0x80
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 ffe8 	bl	800a308 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009338:	e020      	b.n	800937c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc1e 	bl	8009b7e <USBD_CtlError>
              break;
 8009342:	e01b      	b.n	800937c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	885b      	ldrh	r3, [r3, #2]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10e      	bne.n	800936a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <USBD_StdEPReq+0xda>
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	2b80      	cmp	r3, #128	; 0x80
 8009356:	d008      	beq.n	800936a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	88db      	ldrh	r3, [r3, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 ffcf 	bl	800a308 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fccf 	bl	8009d0e <USBD_CtlSendStatus>

              break;
 8009370:	e004      	b.n	800937c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fc02 	bl	8009b7e <USBD_CtlError>
              break;
 800937a:	bf00      	nop
          }
          break;
 800937c:	e0e0      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009384:	2b02      	cmp	r3, #2
 8009386:	d002      	beq.n	800938e <USBD_StdEPReq+0xfe>
 8009388:	2b03      	cmp	r3, #3
 800938a:	d015      	beq.n	80093b8 <USBD_StdEPReq+0x128>
 800938c:	e026      	b.n	80093dc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <USBD_StdEPReq+0x11e>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b80      	cmp	r3, #128	; 0x80
 8009398:	d009      	beq.n	80093ae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 ffb2 	bl	800a308 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093a4:	2180      	movs	r1, #128	; 0x80
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 ffae 	bl	800a308 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ac:	e01c      	b.n	80093e8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fbe4 	bl	8009b7e <USBD_CtlError>
              break;
 80093b6:	e017      	b.n	80093e8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d112      	bne.n	80093e6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 ffb9 	bl	800a346 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc9a 	bl	8009d0e <USBD_CtlSendStatus>
              }
              break;
 80093da:	e004      	b.n	80093e6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fbcd 	bl	8009b7e <USBD_CtlError>
              break;
 80093e4:	e000      	b.n	80093e8 <USBD_StdEPReq+0x158>
              break;
 80093e6:	bf00      	nop
          }
          break;
 80093e8:	e0aa      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d002      	beq.n	80093fa <USBD_StdEPReq+0x16a>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d032      	beq.n	800945e <USBD_StdEPReq+0x1ce>
 80093f8:	e097      	b.n	800952a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <USBD_StdEPReq+0x180>
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d004      	beq.n	8009410 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fbb8 	bl	8009b7e <USBD_CtlError>
                break;
 800940e:	e091      	b.n	8009534 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0b      	bge.n	8009430 <USBD_StdEPReq+0x1a0>
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3310      	adds	r3, #16
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4413      	add	r3, r2
 800942c:	3304      	adds	r3, #4
 800942e:	e00b      	b.n	8009448 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2202      	movs	r2, #2
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fbfb 	bl	8009c52 <USBD_CtlSendData>
              break;
 800945c:	e06a      	b.n	8009534 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800945e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009462:	2b00      	cmp	r3, #0
 8009464:	da11      	bge.n	800948a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	f003 020f 	and.w	r2, r3, #15
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	3318      	adds	r3, #24
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d117      	bne.n	80094b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fb7b 	bl	8009b7e <USBD_CtlError>
                  break;
 8009488:	e054      	b.n	8009534 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fb68 	bl	8009b7e <USBD_CtlError>
                  break;
 80094ae:	e041      	b.n	8009534 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da0b      	bge.n	80094d0 <USBD_StdEPReq+0x240>
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	3310      	adds	r3, #16
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	4413      	add	r3, r2
 80094cc:	3304      	adds	r3, #4
 80094ce:	e00b      	b.n	80094e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <USBD_StdEPReq+0x266>
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	2b80      	cmp	r3, #128	; 0x80
 80094f4:	d103      	bne.n	80094fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e00e      	b.n	800951c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 ff3e 	bl	800a384 <USBD_LL_IsStallEP>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e002      	b.n	800951c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2202      	movs	r2, #2
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb95 	bl	8009c52 <USBD_CtlSendData>
              break;
 8009528:	e004      	b.n	8009534 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fb26 	bl	8009b7e <USBD_CtlError>
              break;
 8009532:	bf00      	nop
          }
          break;
 8009534:	e004      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb20 	bl	8009b7e <USBD_CtlError>
          break;
 800953e:	bf00      	nop
      }
      break;
 8009540:	e004      	b.n	800954c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fb1a 	bl	8009b7e <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	2b06      	cmp	r3, #6
 800957a:	f200 8128 	bhi.w	80097ce <USBD_GetDescriptor+0x276>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <USBD_GetDescriptor+0x2c>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095b9 	.word	0x080095b9
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080097cf 	.word	0x080097cf
 8009594:	080097cf 	.word	0x080097cf
 8009598:	0800976f 	.word	0x0800976f
 800959c:	0800979b 	.word	0x0800979b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
      break;
 80095b6:	e112      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095da:	e100      	b.n	80097de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	f107 0208 	add.w	r2, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	2202      	movs	r2, #2
 80095f4:	701a      	strb	r2, [r3, #0]
      break;
 80095f6:	e0f2      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b05      	cmp	r3, #5
 8009600:	f200 80ac 	bhi.w	800975c <USBD_GetDescriptor+0x204>
 8009604:	a201      	add	r2, pc, #4	; (adr r2, 800960c <USBD_GetDescriptor+0xb4>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009625 	.word	0x08009625
 8009610:	08009659 	.word	0x08009659
 8009614:	0800968d 	.word	0x0800968d
 8009618:	080096c1 	.word	0x080096c1
 800961c:	080096f5 	.word	0x080096f5
 8009620:	08009729 	.word	0x08009729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009646:	e091      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa97 	bl	8009b7e <USBD_CtlError>
            err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
          break;
 8009656:	e089      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967a:	e077      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa7d 	bl	8009b7e <USBD_CtlError>
            err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
          break;
 800968a:	e06f      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ae:	e05d      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa63 	bl	8009b7e <USBD_CtlError>
            err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
          break;
 80096be:	e055      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e2:	e043      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa49 	bl	8009b7e <USBD_CtlError>
            err++;
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	3301      	adds	r3, #1
 80096f0:	72fb      	strb	r3, [r7, #11]
          break;
 80096f2:	e03b      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009716:	e029      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa2f 	bl	8009b7e <USBD_CtlError>
            err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
          break;
 8009726:	e021      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00b      	beq.n	800974c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7c12      	ldrb	r2, [r2, #16]
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974a:	e00f      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa15 	bl	8009b7e <USBD_CtlError>
            err++;
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	3301      	adds	r3, #1
 8009758:	72fb      	strb	r3, [r7, #11]
          break;
 800975a:	e007      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa0d 	bl	8009b7e <USBD_CtlError>
          err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800976a:	e038      	b.n	80097de <USBD_GetDescriptor+0x286>
 800976c:	e037      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7c1b      	ldrb	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	f107 0208 	add.w	r2, r7, #8
 8009782:	4610      	mov	r0, r2
 8009784:	4798      	blx	r3
 8009786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009788:	e029      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9f6 	bl	8009b7e <USBD_CtlError>
        err++;
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
      break;
 8009798:	e021      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7c1b      	ldrb	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10d      	bne.n	80097be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	f107 0208 	add.w	r2, r7, #8
 80097ae:	4610      	mov	r0, r2
 80097b0:	4798      	blx	r3
 80097b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	2207      	movs	r2, #7
 80097ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097bc:	e00f      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9dc 	bl	8009b7e <USBD_CtlError>
        err++;
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	3301      	adds	r3, #1
 80097ca:	72fb      	strb	r3, [r7, #11]
      break;
 80097cc:	e007      	b.n	80097de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f9d4 	bl	8009b7e <USBD_CtlError>
      err++;
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	3301      	adds	r3, #1
 80097da:	72fb      	strb	r3, [r7, #11]
      break;
 80097dc:	bf00      	nop
  }

  if (err != 0U)
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11c      	bne.n	800981e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097e4:	893b      	ldrh	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d011      	beq.n	800980e <USBD_GetDescriptor+0x2b6>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	88db      	ldrh	r3, [r3, #6]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88da      	ldrh	r2, [r3, #6]
 80097f6:	893b      	ldrh	r3, [r7, #8]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bf28      	it	cs
 80097fc:	4613      	movcs	r3, r2
 80097fe:	b29b      	uxth	r3, r3
 8009800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009802:	893b      	ldrh	r3, [r7, #8]
 8009804:	461a      	mov	r2, r3
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa22 	bl	8009c52 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa79 	bl	8009d0e <USBD_CtlSendStatus>
 800981c:	e000      	b.n	8009820 <USBD_GetDescriptor+0x2c8>
    return;
 800981e:	bf00      	nop
    }
  }
}
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop

08009828 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	889b      	ldrh	r3, [r3, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d130      	bne.n	800989c <USBD_SetAddress+0x74>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	88db      	ldrh	r3, [r3, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d12c      	bne.n	800989c <USBD_SetAddress+0x74>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	885b      	ldrh	r3, [r3, #2]
 8009846:	2b7f      	cmp	r3, #127	; 0x7f
 8009848:	d828      	bhi.n	800989c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	885b      	ldrh	r3, [r3, #2]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985c:	2b03      	cmp	r3, #3
 800985e:	d104      	bne.n	800986a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f98b 	bl	8009b7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	e01d      	b.n	80098a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fdb0 	bl	800a3dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa46 	bl	8009d0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009890:	e009      	b.n	80098a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989a:	e004      	b.n	80098a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f96d 	bl	8009b7e <USBD_CtlError>
  }
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b41      	ldr	r3, [pc, #260]	; (80099c8 <USBD_SetConfig+0x118>)
 80098c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098c4:	4b40      	ldr	r3, [pc, #256]	; (80099c8 <USBD_SetConfig+0x118>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d904      	bls.n	80098d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f955 	bl	8009b7e <USBD_CtlError>
 80098d4:	e075      	b.n	80099c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d002      	beq.n	80098e6 <USBD_SetConfig+0x36>
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d023      	beq.n	800992c <USBD_SetConfig+0x7c>
 80098e4:	e062      	b.n	80099ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098e6:	4b38      	ldr	r3, [pc, #224]	; (80099c8 <USBD_SetConfig+0x118>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01a      	beq.n	8009924 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098ee:	4b36      	ldr	r3, [pc, #216]	; (80099c8 <USBD_SetConfig+0x118>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2203      	movs	r2, #3
 80098fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009900:	4b31      	ldr	r3, [pc, #196]	; (80099c8 <USBD_SetConfig+0x118>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff f9e8 	bl	8008cdc <USBD_SetClassConfig>
 800990c:	4603      	mov	r3, r0
 800990e:	2b02      	cmp	r3, #2
 8009910:	d104      	bne.n	800991c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f932 	bl	8009b7e <USBD_CtlError>
            return;
 800991a:	e052      	b.n	80099c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f9f6 	bl	8009d0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009922:	e04e      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9f2 	bl	8009d0e <USBD_CtlSendStatus>
        break;
 800992a:	e04a      	b.n	80099c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800992c:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <USBD_SetConfig+0x118>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d112      	bne.n	800995a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800993c:	4b22      	ldr	r3, [pc, #136]	; (80099c8 <USBD_SetConfig+0x118>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	461a      	mov	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009946:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <USBD_SetConfig+0x118>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff f9e4 	bl	8008d1a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9db 	bl	8009d0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009958:	e033      	b.n	80099c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800995a:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <USBD_SetConfig+0x118>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d01d      	beq.n	80099a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff f9d2 	bl	8008d1a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <USBD_SetConfig+0x118>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009980:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <USBD_SetConfig+0x118>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff f9a8 	bl	8008cdc <USBD_SetClassConfig>
 800998c:	4603      	mov	r3, r0
 800998e:	2b02      	cmp	r3, #2
 8009990:	d104      	bne.n	800999c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f8f2 	bl	8009b7e <USBD_CtlError>
            return;
 800999a:	e012      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9b6 	bl	8009d0e <USBD_CtlSendStatus>
        break;
 80099a2:	e00e      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f9b2 	bl	8009d0e <USBD_CtlSendStatus>
        break;
 80099aa:	e00a      	b.n	80099c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8e5 	bl	8009b7e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <USBD_SetConfig+0x118>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff f9ad 	bl	8008d1a <USBD_ClrClassConfig>
        break;
 80099c0:	bf00      	nop
    }
  }
}
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	200003fc 	.word	0x200003fc

080099cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d004      	beq.n	80099e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8cc 	bl	8009b7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099e6:	e022      	b.n	8009a2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc02      	bgt.n	80099f8 <USBD_GetConfig+0x2c>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc03      	bgt.n	80099fe <USBD_GetConfig+0x32>
 80099f6:	e015      	b.n	8009a24 <USBD_GetConfig+0x58>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetConfig+0x48>
 80099fc:	e012      	b.n	8009a24 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3308      	adds	r3, #8
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f920 	bl	8009c52 <USBD_CtlSendData>
        break;
 8009a12:	e00c      	b.n	8009a2e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3304      	adds	r3, #4
 8009a18:	2201      	movs	r2, #1
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f918 	bl	8009c52 <USBD_CtlSendData>
        break;
 8009a22:	e004      	b.n	8009a2e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8a9 	bl	8009b7e <USBD_CtlError>
        break;
 8009a2c:	bf00      	nop
}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	3b01      	subs	r3, #1
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d81e      	bhi.n	8009a8a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	88db      	ldrh	r3, [r3, #6]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d004      	beq.n	8009a5e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f891 	bl	8009b7e <USBD_CtlError>
        break;
 8009a5c:	e01a      	b.n	8009a94 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f043 0202 	orr.w	r2, r3, #2
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	2202      	movs	r2, #2
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8e5 	bl	8009c52 <USBD_CtlSendData>
      break;
 8009a88:	e004      	b.n	8009a94 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f876 	bl	8009b7e <USBD_CtlError>
      break;
 8009a92:	bf00      	nop
  }
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d106      	bne.n	8009abc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f929 	bl	8009d0e <USBD_CtlSendStatus>
  }
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d80b      	bhi.n	8009af2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d10c      	bne.n	8009afc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f90f 	bl	8009d0e <USBD_CtlSendStatus>
      }
      break;
 8009af0:	e004      	b.n	8009afc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f842 	bl	8009b7e <USBD_CtlError>
      break;
 8009afa:	e000      	b.n	8009afe <USBD_ClrFeature+0x3a>
      break;
 8009afc:	bf00      	nop
  }
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	785a      	ldrb	r2, [r3, #1]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3302      	adds	r3, #2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	3303      	adds	r3, #3
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	3305      	adds	r3, #5
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	3306      	adds	r3, #6
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	3307      	adds	r3, #7
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	80da      	strh	r2, [r3, #6]

}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr

08009b7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b88:	2180      	movs	r1, #128	; 0x80
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbbc 	bl	800a308 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b90:	2100      	movs	r1, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fbb8 	bl	800a308 <USBD_LL_StallEP>
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d032      	beq.n	8009c1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f834 	bl	8009c24 <USBD_GetLen>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	75fa      	strb	r2, [r7, #23]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	75fa      	strb	r2, [r7, #23]
 8009be2:	461a      	mov	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	2203      	movs	r2, #3
 8009bea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bec:	e012      	b.n	8009c14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	60fa      	str	r2, [r7, #12]
 8009bf4:	7dfa      	ldrb	r2, [r7, #23]
 8009bf6:	1c51      	adds	r1, r2, #1
 8009bf8:	75f9      	strb	r1, [r7, #23]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	440a      	add	r2, r1
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	75fa      	strb	r2, [r7, #23]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4413      	add	r3, r2
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e8      	bne.n	8009bee <USBD_GetString+0x4e>
    }
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c30:	e005      	b.n	8009c3e <USBD_GetLen+0x1a>
  {
    len++;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	3301      	adds	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1f5      	bne.n	8009c32 <USBD_GetLen+0xe>
  }

  return len;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr

08009c52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c68:	88fa      	ldrh	r2, [r7, #6]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 fbcd 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	4613      	mov	r3, r2
 8009c96:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 fbbb 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cc4:	88fa      	ldrh	r2, [r7, #6]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cd4:	88fb      	ldrh	r3, [r7, #6]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 fbc0 	bl	800a460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fbae 	bl	800a460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2204      	movs	r2, #4
 8009d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2200      	movs	r2, #0
 8009d22:	2100      	movs	r1, #0
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb78 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2205      	movs	r2, #5
 8009d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d44:	2300      	movs	r3, #0
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fb88 	bl	800a460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d60:	2200      	movs	r2, #0
 8009d62:	4912      	ldr	r1, [pc, #72]	; (8009dac <MX_USB_DEVICE_Init+0x50>)
 8009d64:	4812      	ldr	r0, [pc, #72]	; (8009db0 <MX_USB_DEVICE_Init+0x54>)
 8009d66:	f7fe ff5f 	bl	8008c28 <USBD_Init>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d70:	f7f7 fab0 	bl	80012d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009d74:	490f      	ldr	r1, [pc, #60]	; (8009db4 <MX_USB_DEVICE_Init+0x58>)
 8009d76:	480e      	ldr	r0, [pc, #56]	; (8009db0 <MX_USB_DEVICE_Init+0x54>)
 8009d78:	f7fe ff81 	bl	8008c7e <USBD_RegisterClass>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d82:	f7f7 faa7 	bl	80012d4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009d86:	490c      	ldr	r1, [pc, #48]	; (8009db8 <MX_USB_DEVICE_Init+0x5c>)
 8009d88:	4809      	ldr	r0, [pc, #36]	; (8009db0 <MX_USB_DEVICE_Init+0x54>)
 8009d8a:	f7fe ff37 	bl	8008bfc <USBD_CUSTOM_HID_RegisterInterface>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d94:	f7f7 fa9e 	bl	80012d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d98:	4805      	ldr	r0, [pc, #20]	; (8009db0 <MX_USB_DEVICE_Init+0x54>)
 8009d9a:	f7fe ff89 	bl	8008cb0 <USBD_Start>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009da4:	f7f7 fa96 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009da8:	bf00      	nop
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	2000012c 	.word	0x2000012c
 8009db0:	20000400 	.word	0x20000400
 8009db4:	20000010 	.word	0x20000010
 8009db8:	2000011c 	.word	0x2000011c

08009dbc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bc80      	pop	{r7}
 8009dc8:	4770      	bx	lr

08009dca <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009dce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	460a      	mov	r2, r1
 8009de2:	71fb      	strb	r3, [r7, #7]
 8009de4:	4613      	mov	r3, r2
 8009de6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8009dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dee:	60fb      	str	r3, [r7, #12]
	USB_Interrupt(&hhid->Report_buf[0]);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f7 f866 	bl	8000ec4 <USB_Interrupt>
  return (USBD_OK);
 8009df8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000400 	.word	0x20000400

08009e08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2212      	movs	r2, #18
 8009e18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e1a:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20000148 	.word	0x20000148

08009e2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	6039      	str	r1, [r7, #0]
 8009e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2204      	movs	r2, #4
 8009e3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	2000015c 	.word	0x2000015c

08009e50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	6039      	str	r1, [r7, #0]
 8009e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4907      	ldr	r1, [pc, #28]	; (8009e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e66:	4808      	ldr	r0, [pc, #32]	; (8009e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e68:	f7ff fe9a 	bl	8009ba0 <USBD_GetString>
 8009e6c:	e004      	b.n	8009e78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4904      	ldr	r1, [pc, #16]	; (8009e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e72:	4805      	ldr	r0, [pc, #20]	; (8009e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e74:	f7ff fe94 	bl	8009ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e78:	4b02      	ldr	r3, [pc, #8]	; (8009e84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200006c4 	.word	0x200006c4
 8009e88:	0800a5d0 	.word	0x0800a5d0

08009e8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	4904      	ldr	r1, [pc, #16]	; (8009eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e9c:	4804      	ldr	r0, [pc, #16]	; (8009eb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e9e:	f7ff fe7f 	bl	8009ba0 <USBD_GetString>
  return USBD_StrDesc;
 8009ea2:	4b02      	ldr	r3, [pc, #8]	; (8009eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	200006c4 	.word	0x200006c4
 8009eb0:	0800a5dc 	.word	0x0800a5dc

08009eb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	6039      	str	r1, [r7, #0]
 8009ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	221a      	movs	r2, #26
 8009ec4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ec6:	f000 f843 	bl	8009f50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009eca:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000160 	.word	0x20000160

08009ed8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d105      	bne.n	8009ef6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4907      	ldr	r1, [pc, #28]	; (8009f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eee:	4808      	ldr	r0, [pc, #32]	; (8009f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ef0:	f7ff fe56 	bl	8009ba0 <USBD_GetString>
 8009ef4:	e004      	b.n	8009f00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	4904      	ldr	r1, [pc, #16]	; (8009f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009efa:	4805      	ldr	r0, [pc, #20]	; (8009f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009efc:	f7ff fe50 	bl	8009ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200006c4 	.word	0x200006c4
 8009f10:	0800a5f0 	.word	0x0800a5f0

08009f14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d105      	bne.n	8009f32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	4907      	ldr	r1, [pc, #28]	; (8009f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f2a:	4808      	ldr	r0, [pc, #32]	; (8009f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f2c:	f7ff fe38 	bl	8009ba0 <USBD_GetString>
 8009f30:	e004      	b.n	8009f3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	4904      	ldr	r1, [pc, #16]	; (8009f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f36:	4805      	ldr	r0, [pc, #20]	; (8009f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f38:	f7ff fe32 	bl	8009ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f3c:	4b02      	ldr	r3, [pc, #8]	; (8009f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200006c4 	.word	0x200006c4
 8009f4c:	0800a5fc 	.word	0x0800a5fc

08009f50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <Get_SerialNum+0x44>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <Get_SerialNum+0x48>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f62:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <Get_SerialNum+0x4c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f76:	2208      	movs	r2, #8
 8009f78:	4909      	ldr	r1, [pc, #36]	; (8009fa0 <Get_SerialNum+0x50>)
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 f814 	bl	8009fa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f80:	2204      	movs	r2, #4
 8009f82:	4908      	ldr	r1, [pc, #32]	; (8009fa4 <Get_SerialNum+0x54>)
 8009f84:	68b8      	ldr	r0, [r7, #8]
 8009f86:	f000 f80f 	bl	8009fa8 <IntToUnicode>
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	1ffff7e8 	.word	0x1ffff7e8
 8009f98:	1ffff7ec 	.word	0x1ffff7ec
 8009f9c:	1ffff7f0 	.word	0x1ffff7f0
 8009fa0:	20000162 	.word	0x20000162
 8009fa4:	20000172 	.word	0x20000172

08009fa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
 8009fbe:	e027      	b.n	800a010 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	0f1b      	lsrs	r3, r3, #28
 8009fc4:	2b09      	cmp	r3, #9
 8009fc6:	d80b      	bhi.n	8009fe0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	0f1b      	lsrs	r3, r3, #28
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	440b      	add	r3, r1
 8009fd8:	3230      	adds	r2, #48	; 0x30
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e00a      	b.n	8009ff6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	0f1b      	lsrs	r3, r3, #28
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4619      	mov	r1, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	440b      	add	r3, r1
 8009ff0:	3237      	adds	r2, #55	; 0x37
 8009ff2:	b2d2      	uxtb	r2, r2
 8009ff4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	3301      	adds	r3, #1
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	4413      	add	r3, r2
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	3301      	adds	r3, #1
 800a00e:	75fb      	strb	r3, [r7, #23]
 800a010:	7dfa      	ldrb	r2, [r7, #23]
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	429a      	cmp	r2, r3
 800a016:	d3d3      	bcc.n	8009fc0 <IntToUnicode+0x18>
  }
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr

0800a024 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a0d      	ldr	r2, [pc, #52]	; (800a068 <HAL_PCD_MspInit+0x44>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d113      	bne.n	800a05e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a036:	4b0d      	ldr	r3, [pc, #52]	; (800a06c <HAL_PCD_MspInit+0x48>)
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4a0c      	ldr	r2, [pc, #48]	; (800a06c <HAL_PCD_MspInit+0x48>)
 800a03c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a040:	61d3      	str	r3, [r2, #28]
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <HAL_PCD_MspInit+0x48>)
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	2014      	movs	r0, #20
 800a054:	f7f8 f9d5 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a058:	2014      	movs	r0, #20
 800a05a:	f7f8 f9ee 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	40005c00 	.word	0x40005c00
 800a06c:	40021000 	.word	0x40021000

0800a070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a084:	4619      	mov	r1, r3
 800a086:	4610      	mov	r0, r2
 800a088:	f7fe fe5a 	bl	8008d40 <USBD_LL_SetupStage>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	440b      	add	r3, r1
 800a0b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	f7fe fe8c 	bl	8008dda <USBD_LL_DataOutStage>
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	333c      	adds	r3, #60	; 0x3c
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	78fb      	ldrb	r3, [r7, #3]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7fe fee3 	bl	8008ebc <USBD_LL_DataInStage>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fff3 	bl	80090f8 <USBD_LL_SOF>
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a122:	2301      	movs	r3, #1
 800a124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d001      	beq.n	800a132 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a12e:	f7f7 f8d1 	bl	80012d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a138:	7bfa      	ldrb	r2, [r7, #15]
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe ffa3 	bl	8009088 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe ff5c 	bl	8009006 <USBD_LL_Reset>
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe ff9d 	bl	80090a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <HAL_PCD_SuspendCallback+0x30>)
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	4a03      	ldr	r2, [pc, #12]	; (800a188 <HAL_PCD_SuspendCallback+0x30>)
 800a17a:	f043 0306 	orr.w	r3, r3, #6
 800a17e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	e000ed00 	.word	0xe000ed00

0800a18c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ff97 	bl	80090ce <USBD_LL_Resume>
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1b0:	4a23      	ldr	r2, [pc, #140]	; (800a240 <USBD_LL_Init+0x98>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a21      	ldr	r2, [pc, #132]	; (800a240 <USBD_LL_Init+0x98>)
 800a1bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a1c0:	4b1f      	ldr	r3, [pc, #124]	; (800a240 <USBD_LL_Init+0x98>)
 800a1c2:	4a20      	ldr	r2, [pc, #128]	; (800a244 <USBD_LL_Init+0x9c>)
 800a1c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <USBD_LL_Init+0x98>)
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a1cc:	4b1c      	ldr	r3, [pc, #112]	; (800a240 <USBD_LL_Init+0x98>)
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <USBD_LL_Init+0x98>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1d8:	4b19      	ldr	r3, [pc, #100]	; (800a240 <USBD_LL_Init+0x98>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1de:	4b18      	ldr	r3, [pc, #96]	; (800a240 <USBD_LL_Init+0x98>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1e4:	4816      	ldr	r0, [pc, #88]	; (800a240 <USBD_LL_Init+0x98>)
 800a1e6:	f7f8 fd1f 	bl	8002c28 <HAL_PCD_Init>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a1f0:	f7f7 f870 	bl	80012d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1fa:	2318      	movs	r3, #24
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	f7fa f97c 	bl	80044fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a20a:	2358      	movs	r3, #88	; 0x58
 800a20c:	2200      	movs	r2, #0
 800a20e:	2180      	movs	r1, #128	; 0x80
 800a210:	f7fa f974 	bl	80044fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a21a:	2398      	movs	r3, #152	; 0x98
 800a21c:	2200      	movs	r2, #0
 800a21e:	2181      	movs	r1, #129	; 0x81
 800a220:	f7fa f96c 	bl	80044fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a22a:	23d8      	movs	r3, #216	; 0xd8
 800a22c:	2200      	movs	r2, #0
 800a22e:	2101      	movs	r1, #1
 800a230:	f7fa f964 	bl	80044fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200008c4 	.word	0x200008c4
 800a244:	40005c00 	.word	0x40005c00

0800a248 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a25e:	4618      	mov	r0, r3
 800a260:	f7f8 fded 	bl	8002e3e <HAL_PCD_Start>
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f93c 	bl	800a4e8 <USBD_Get_USB_Status>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a274:	7bbb      	ldrb	r3, [r7, #14]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	461a      	mov	r2, r3
 800a28c:	4603      	mov	r3, r0
 800a28e:	70fb      	strb	r3, [r7, #3]
 800a290:	460b      	mov	r3, r1
 800a292:	70bb      	strb	r3, [r7, #2]
 800a294:	4613      	mov	r3, r2
 800a296:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2a6:	78bb      	ldrb	r3, [r7, #2]
 800a2a8:	883a      	ldrh	r2, [r7, #0]
 800a2aa:	78f9      	ldrb	r1, [r7, #3]
 800a2ac:	f7f8 ff65 	bl	800317a <HAL_PCD_EP_Open>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f916 	bl	800a4e8 <USBD_Get_USB_Status>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7f8 ffac 	bl	8003246 <HAL_PCD_EP_Close>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f8f7 	bl	800a4e8 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7f9 f855 	bl	80033d6 <HAL_PCD_EP_SetStall>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f8d8 	bl	800a4e8 <USBD_Get_USB_Status>
 800a338:	4603      	mov	r3, r0
 800a33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a360:	78fa      	ldrb	r2, [r7, #3]
 800a362:	4611      	mov	r1, r2
 800a364:	4618      	mov	r0, r3
 800a366:	f7f9 f896 	bl	8003496 <HAL_PCD_EP_ClrStall>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f8b9 	bl	800a4e8 <USBD_Get_USB_Status>
 800a376:	4603      	mov	r3, r0
 800a378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a396:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	da0c      	bge.n	800a3ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a6:	68f9      	ldr	r1, [r7, #12]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	e00b      	b.n	800a3d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3c0:	68f9      	ldr	r1, [r7, #12]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	00db      	lsls	r3, r3, #3
 800a3ca:	440b      	add	r3, r1
 800a3cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a3d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f8 fe98 	bl	8003130 <HAL_PCD_SetAddress>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f86e 	bl	800a4e8 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	461a      	mov	r2, r3
 800a426:	460b      	mov	r3, r1
 800a428:	72fb      	strb	r3, [r7, #11]
 800a42a:	4613      	mov	r3, r2
 800a42c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a43c:	893b      	ldrh	r3, [r7, #8]
 800a43e:	7af9      	ldrb	r1, [r7, #11]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	f7f8 ff85 	bl	8003350 <HAL_PCD_EP_Transmit>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f84b 	bl	800a4e8 <USBD_Get_USB_Status>
 800a452:	4603      	mov	r3, r0
 800a454:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a456:	7dbb      	ldrb	r3, [r7, #22]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	607a      	str	r2, [r7, #4]
 800a46a:	461a      	mov	r2, r3
 800a46c:	460b      	mov	r3, r1
 800a46e:	72fb      	strb	r3, [r7, #11]
 800a470:	4613      	mov	r3, r2
 800a472:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a482:	893b      	ldrh	r3, [r7, #8]
 800a484:	7af9      	ldrb	r1, [r7, #11]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	f7f8 ff25 	bl	80032d6 <HAL_PCD_EP_Receive>
 800a48c:	4603      	mov	r3, r0
 800a48e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	4618      	mov	r0, r3
 800a494:	f000 f828 	bl	800a4e8 <USBD_Get_USB_Status>
 800a498:	4603      	mov	r3, r0
 800a49a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a49c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <USBD_static_malloc+0x14>)
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bc80      	pop	{r7}
 800a4ba:	4770      	bx	lr
 800a4bc:	20000bb0 	.word	0x20000bb0

0800a4c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr

0800a4e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d817      	bhi.n	800a52c <USBD_Get_USB_Status+0x44>
 800a4fc:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <USBD_Get_USB_Status+0x1c>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a51b 	.word	0x0800a51b
 800a50c:	0800a521 	.word	0x0800a521
 800a510:	0800a527 	.word	0x0800a527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
    break;
 800a518:	e00b      	b.n	800a532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a51a:	2302      	movs	r3, #2
 800a51c:	73fb      	strb	r3, [r7, #15]
    break;
 800a51e:	e008      	b.n	800a532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
    break;
 800a524:	e005      	b.n	800a532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a526:	2302      	movs	r3, #2
 800a528:	73fb      	strb	r3, [r7, #15]
    break;
 800a52a:	e002      	b.n	800a532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a52c:	2302      	movs	r3, #2
 800a52e:	73fb      	strb	r3, [r7, #15]
    break;
 800a530:	bf00      	nop
  }
  return usb_status;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop

0800a540 <__libc_init_array>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	2600      	movs	r6, #0
 800a544:	4d0c      	ldr	r5, [pc, #48]	; (800a578 <__libc_init_array+0x38>)
 800a546:	4c0d      	ldr	r4, [pc, #52]	; (800a57c <__libc_init_array+0x3c>)
 800a548:	1b64      	subs	r4, r4, r5
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	42a6      	cmp	r6, r4
 800a54e:	d109      	bne.n	800a564 <__libc_init_array+0x24>
 800a550:	f000 f822 	bl	800a598 <_init>
 800a554:	2600      	movs	r6, #0
 800a556:	4d0a      	ldr	r5, [pc, #40]	; (800a580 <__libc_init_array+0x40>)
 800a558:	4c0a      	ldr	r4, [pc, #40]	; (800a584 <__libc_init_array+0x44>)
 800a55a:	1b64      	subs	r4, r4, r5
 800a55c:	10a4      	asrs	r4, r4, #2
 800a55e:	42a6      	cmp	r6, r4
 800a560:	d105      	bne.n	800a56e <__libc_init_array+0x2e>
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	f855 3b04 	ldr.w	r3, [r5], #4
 800a568:	4798      	blx	r3
 800a56a:	3601      	adds	r6, #1
 800a56c:	e7ee      	b.n	800a54c <__libc_init_array+0xc>
 800a56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a572:	4798      	blx	r3
 800a574:	3601      	adds	r6, #1
 800a576:	e7f2      	b.n	800a55e <__libc_init_array+0x1e>
 800a578:	0800a630 	.word	0x0800a630
 800a57c:	0800a630 	.word	0x0800a630
 800a580:	0800a630 	.word	0x0800a630
 800a584:	0800a634 	.word	0x0800a634

0800a588 <memset>:
 800a588:	4603      	mov	r3, r0
 800a58a:	4402      	add	r2, r0
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d100      	bne.n	800a592 <memset+0xa>
 800a590:	4770      	bx	lr
 800a592:	f803 1b01 	strb.w	r1, [r3], #1
 800a596:	e7f9      	b.n	800a58c <memset+0x4>

0800a598 <_init>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr

0800a5a4 <_fini>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	bf00      	nop
 800a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5aa:	bc08      	pop	{r3}
 800a5ac:	469e      	mov	lr, r3
 800a5ae:	4770      	bx	lr
